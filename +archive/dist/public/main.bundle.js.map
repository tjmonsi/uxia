{"version":3,"sources":["webpack:///webpack/bootstrap 65005af6273127e60698","webpack:///../bower_components/polymer/lib/utils/boot.html","webpack:///../bower_components/polymer/lib/utils/mixin.html","webpack:///../bower_components/polymer/lib/utils/resolve-url.html","webpack:///../bower_components/polymer/lib/utils/case-map.html","webpack:///../bower_components/polymer/lib/utils/async.html","webpack:///../bower_components/polymer/polymer-element.html","webpack:///../bower_components/polymer/lib/mixins/property-effects.html","webpack:///../bower_components/polymer/lib/mixins/element-mixin.html","webpack:///../bower_components/polymer/lib/utils/settings.html","webpack:///../bower_components/polymer/lib/utils/style-gather.html","webpack:///../bower_components/polymer/lib/utils/flattened-nodes-observer.html","webpack:///../bower_components/polymer/lib/utils/array-splice.html","webpack:///../core/shell/index.js","webpack:///../bower_components/polymer/lib/elements/dom-module.html","webpack:///../bower_components/polymer/lib/utils/path.html","webpack:///../bower_components/polymer/lib/mixins/property-accessors.html","webpack:///../bower_components/polymer/lib/mixins/template-stamp.html","webpack:///../core/mixins/location-mixin.js","webpack:///../core/utils/resolve-url.js","webpack:///../core/mixins/query-params-mixin.js","webpack:///../node_modules/path-to-regexp/index.js","webpack:///../node_modules/isarray/index.js","webpack:///../src/routing.js","webpack:///../src/http-codes.js","webpack:///../src/partials.js","webpack:///../src/authentication/index.js","webpack:///./node_modules/polymer-webpack-loader/register-html-template.js"],"names":["messages","AppShell","params","type","Object","queryParams","currentRoute","String","path","query","observer","urlSpaceRegex","hash","dwellTime","Number","_urlSpaceRegExp","computed","_lastChangedAt","_initialized","Boolean","paramsString","paramsObject","_dontReact","_routes","_observer","Polymer","FlattenedNodesObserver","info","_contentAdded","addedNodes","filter","node","nodeType","window","Node","ELEMENT_NODE","then","messageInterval","setInterval","length","pop","message","optTapHandler","optAction","optActionHandler","optDuration","showMessage","clearInterval","disconnect","shadowRoot","querySelector","push","close","pages","forEach","page","classList","add","getAttribute","element","auth","_pathChanged","location","href","replace","routeName","entries","keys","re","route","exec","j","name","_checkAuth","Promise","res","_loadPage","catch","e","console","log","routes","assign","i","remove","_setProperty","ga","Element","customElements","define","is","p","superClass","_boundHashChanged","_hashChanged","bind","_boundUrlChanged","_urlChanged","_boundGlobalOnClick","_globalOnClick","addEventListener","document","body","performance","now","decodeURIComponent","pathname","search","slice","removeEventListener","substring","_dontUpdateUrl","_updateUrl","partiallyEncodedPath","encodeURI","partiallyEncodedQuery","partiallyEncodedHash","newUrl","_getUrl","fullNewUrl","protocol","host","shouldReplace","history","replaceState","pushState","dispatchEvent","CustomEvent","event","defaultPrevented","_getSameOriginLinkHref","preventDefault","button","metaKey","ctrlKey","eventPath","composedPath","anchor","tagName","target","top","url","baseURI","origin","urlOrigin","normalizedHref","test","fullNormalizedHref","RegExp","workingURL","urlDoc","urlBase","base","undefined","u","URL","implementation","createHTMLDocument","createElement","head","appendChild","_decodeParams","_encodeParams","encodedParams","key","value","encodeURIComponent","toString","join","paramString","paramList","split","param","isarray","require","module","exports","pathToRegexp","parse","compile","tokensToFunction","tokensToRegExp","PATH_REGEXP","str","options","tokens","index","defaultDelimiter","delimiter","m","escaped","offset","next","prefix","capture","group","modifier","asterisk","partial","repeat","optional","pattern","escapeGroup","escapeString","substr","encodeURIComponentPretty","c","charCodeAt","toUpperCase","encodeAsterisk","matches","Array","obj","opts","data","encode","pretty","token","segment","TypeError","JSON","stringify","attachKeys","flags","sensitive","regexpToRegexp","groups","source","match","arrayToRegexp","parts","regexp","stringToRegexp","strict","end","endsWithDelimiter","isArray","arr","call","exampleAuthentication","RegisterHtmlTemplate","val","content","template","innerHTML","createDocumentFragment","firstChild","importNode","trimmedVal","trim","div","insertBefore"],"mappings":"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","file":"main.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tvar parentJsonpFunction = window[\"webpackJsonp\"];\n \twindow[\"webpackJsonp\"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [], result;\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t};\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// objects to store loaded and loading chunks\n \tvar installedChunks = {\n \t\t5: 0\n \t};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData === 0) {\n \t\t\treturn new Promise(function(resolve) { resolve(); });\n \t\t}\n\n \t\t// a Promise means \"currently loading\".\n \t\tif(installedChunkData) {\n \t\t\treturn installedChunkData[2];\n \t\t}\n\n \t\t// setup Promise in chunk cache\n \t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t});\n \t\tinstalledChunkData[2] = promise;\n\n \t\t// start chunk loading\n \t\tvar head = document.getElementsByTagName('head')[0];\n \t\tvar script = document.createElement('script');\n \t\tscript.type = 'text/javascript';\n \t\tscript.charset = 'utf-8';\n \t\tscript.async = true;\n \t\tscript.timeout = 120000;\n\n \t\tif (__webpack_require__.nc) {\n \t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t}\n \t\tscript.src = __webpack_require__.p + \"\" + ({\"0\":\"uxia-home-page\",\"1\":\"app-toast\",\"2\":\"example-style-guide-page\",\"3\":\"example-not-found-page\",\"4\":\"example-not-authorized-page\"}[chunkId]||chunkId) + \".\" + chunkId + \".bundle.js\";\n \t\tvar timeout = setTimeout(onScriptComplete, 120000);\n \t\tscript.onerror = script.onload = onScriptComplete;\n \t\tfunction onScriptComplete() {\n \t\t\t// avoid mem leaks in IE.\n \t\t\tscript.onerror = script.onload = null;\n \t\t\tclearTimeout(timeout);\n \t\t\tvar chunk = installedChunks[chunkId];\n \t\t\tif(chunk !== 0) {\n \t\t\t\tif(chunk) {\n \t\t\t\t\tchunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));\n \t\t\t\t}\n \t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t}\n \t\t};\n \t\thead.appendChild(script);\n\n \t\treturn promise;\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 12);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 65005af6273127e60698","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n<script>\n(function() {\n  'use strict';\n\n  const userPolymer = window.Polymer;\n\n  /**\n   * @namespace Polymer\n   * @summary Polymer is a lightweight library built on top of the web\n   *   standards-based Web Components API's, and makes it easy to build your\n   *   own custom HTML elements.\n   * @param {!PolymerInit} info Prototype for the custom element. It must contain\n   *   an `is` property to specify the element name. Other properties populate\n   *   the element prototype. The `properties`, `observers`, `hostAttributes`,\n   *   and `listeners` properties are processed to create element features.\n   * @return {!Object} Returns a custom element class for the given provided\n   *   prototype `info` object. The name of the element if given by `info.is`.\n   */\n  window.Polymer = function(info) {\n    return window.Polymer._polymerFn(info);\n  }\n\n  // support user settings on the Polymer object\n  if (userPolymer) {\n    Object.assign(Polymer, userPolymer);\n  }\n\n  // To be plugged by legacy implementation if loaded\n  /* eslint-disable valid-jsdoc */\n  /**\n   * @param {!PolymerInit} info Prototype for the custom element. It must contain\n   *   an `is` property to specify the element name. Other properties populate\n   *   the element prototype. The `properties`, `observers`, `hostAttributes`,\n   *   and `listeners` properties are processed to create element features.\n   * @return {!Object} Returns a custom element class for the given provided\n   *   prototype `info` object. The name of the element if given by `info.is`.\n   */\n  window.Polymer._polymerFn = function(info) { // eslint-disable-line no-unused-vars\n    throw new Error('Load polymer.html to use the Polymer() function.');\n  }\n  /* eslint-enable */\n\n  window.Polymer.version = '2.0.1';\n\n  /* eslint-disable no-unused-vars */\n  /*\n  When using Closure Compiler, JSCompiler_renameProperty(property, object) is replaced by the munged name for object[property]\n  We cannot alias this function, so we have to use a small shim that has the same behavior when not compiling.\n  */\n  window.JSCompiler_renameProperty = function(prop, obj) {\n    return prop;\n  }\n  /* eslint-enable */\n\n})();\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/utils/boot.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n\n<link rel=\"import\" href=\"boot.html\">\n\n<script>\n\n(function() {\n\n  'use strict';\n\n  // unique global id for deduping mixins.\n  let dedupeId = 0;\n\n  /**\n   * @constructor\n   * @extends {Function}\n   */\n  function MixinFunction(){}\n  /** @type {(WeakMap | undefined)} */\n  MixinFunction.prototype.__mixinApplications;\n  /** @type {(Object | undefined)} */\n  MixinFunction.prototype.__mixinSet;\n\n  /* eslint-disable valid-jsdoc */\n  /**\n   * Wraps an ES6 class expression mixin such that the mixin is only applied\n   * if it has not already been applied its base argument.  Also memoizes mixin\n   * applications.\n   *\n   * @memberof Polymer\n   * @template T\n   * @param {T} mixin ES6 class expression mixin to wrap\n   * @suppress {invalidCasts}\n   */\n  Polymer.dedupingMixin = function(mixin) {\n    let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;\n    if (!mixinApplications) {\n      mixinApplications = new WeakMap();\n      /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;\n    }\n    // maintain a unique id for each mixin\n    let mixinDedupeId = dedupeId++;\n    function dedupingMixin(base) {\n      let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;\n      if (baseSet && baseSet[mixinDedupeId]) {\n        return base;\n      }\n      let map = mixinApplications;\n      let extended = map.get(base);\n      if (!extended) {\n        extended = /** @type {!Function} */(mixin)(base);\n        map.set(base, extended);\n      }\n      // copy inherited mixin set from the extended class, or the base class\n      // NOTE: we avoid use of Set here because some browser (IE11)\n      // cannot extend a base Set via the constructor.\n      let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);\n      mixinSet[mixinDedupeId] = true;\n      /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;\n      return extended;\n    }\n\n    return dedupingMixin;\n  };\n  /* eslint-enable valid-jsdoc */\n\n})();\n\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/utils/mixin.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n<link rel=\"import\" href=\"boot.html\">\n\n<script>\n\n  (function() {\n    'use strict';\n\n    let CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\n    let ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n    let workingURL;\n    let resolveDoc;\n    /**\n     * Resolves the given URL against the provided `baseUri'.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} url Input URL to resolve\n     * @param {?string=} baseURI Base URI to resolve the URL against\n     * @return {string} resolved URL\n     */\n    function resolveUrl(url, baseURI) {\n      if (url && ABS_URL.test(url)) {\n        return url;\n      }\n      // Lazy feature detection.\n      if (workingURL === undefined) {\n        workingURL = false;\n        try {\n          const u = new URL('b', 'http://a');\n          u.pathname = 'c%20d';\n          workingURL = (u.href === 'http://a/c%20d');\n        } catch (e) {\n          // silently fail\n        }\n      }\n      if (!baseURI) {\n        baseURI = document.baseURI || window.location.href;\n      }\n      if (workingURL) {\n        return (new URL(url, baseURI)).href;\n      }\n      // Fallback to creating an anchor into a disconnected document.\n      if (!resolveDoc) {\n        resolveDoc = document.implementation.createHTMLDocument('temp');\n        resolveDoc.base = resolveDoc.createElement('base');\n        resolveDoc.head.appendChild(resolveDoc.base);\n        resolveDoc.anchor = resolveDoc.createElement('a');\n        resolveDoc.body.appendChild(resolveDoc.anchor);\n      }\n      resolveDoc.base.href = baseURI;\n      resolveDoc.anchor.href = url;\n      return resolveDoc.anchor.href || url;\n\n    }\n\n    /**\n     * Resolves any relative URL's in the given CSS text against the provided\n     * `ownerDocument`'s `baseURI`.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} cssText CSS text to process\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Processed CSS text with resolved URL's\n     */\n    function resolveCss(cssText, baseURI) {\n      return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n        return pre + '\\'' +\n          resolveUrl(url.replace(/[\"']/g, ''), baseURI) +\n          '\\'' + post;\n      });\n    }\n\n    /**\n     * Returns a path from a given `url`. The path includes the trailing\n     * `/` from the url.\n     *\n     * @memberof Polymer.ResolveUrl\n     * @param {string} url Input URL to transform\n     * @return {string} resolved path\n     */\n    function pathFromUrl(url) {\n      return url.substring(0, url.lastIndexOf('/') + 1);\n    }\n\n    /**\n     * Module with utilities for resolving relative URL's.\n     *\n     * @namespace\n     * @memberof Polymer\n     * @summary Module with utilities for resolving relative URL's.\n     */\n    Polymer.ResolveUrl = {\n      resolveCss: resolveCss,\n      resolveUrl: resolveUrl,\n      pathFromUrl: pathFromUrl\n    };\n\n  })();\n\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/utils/resolve-url.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n<link rel=\"import\" href=\"boot.html\">\n<script>\n(function() {\n  'use strict';\n\n  const caseMap = {};\n  const DASH_TO_CAMEL = /-[a-z]/g;\n  const CAMEL_TO_DASH = /([A-Z])/g;\n\n  /**\n   * Module with utilities for converting between \"dash-case\" and \"camelCase\"\n   * identifiers.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides utilities for converting between \"dash-case\"\n   *   and \"camelCase\".\n   */\n  const CaseMap = {\n\n    /**\n     * Converts \"dash-case\" identifier (e.g. `foo-bar-baz`) to \"camelCase\"\n     * (e.g. `fooBarBaz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} dash Dash-case identifier\n     * @return {string} Camel-case representation of the identifier\n     */\n    dashToCamelCase(dash) {\n      return caseMap[dash] || (\n        caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,\n          (m) => m[1].toUpperCase()\n        )\n      );\n    },\n\n    /**\n     * Converts \"camelCase\" identifier (e.g. `fooBarBaz`) to \"dash-case\"\n     * (e.g. `foo-bar-baz`).\n     *\n     * @memberof Polymer.CaseMap\n     * @param {string} camel Camel-case identifier\n     * @return {string} Dash-case representation of the identifier\n     */\n    camelToDashCase(camel) {\n      return caseMap[camel] || (\n        caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()\n      );\n    }\n\n  };\n\n  Polymer.CaseMap = CaseMap;\n})();\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/utils/case-map.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n<link rel=\"import\" href=\"boot.html\">\n\n<script>\n(function() {\n\n  'use strict';\n\n  /** @typedef {{run: function(function(), number=):number, cancel: function(number)}} */\n  let AsyncInterface; // eslint-disable-line no-unused-vars\n\n  // Microtask implemented using Mutation Observer\n  let microtaskCurrHandle = 0;\n  let microtaskLastHandle = 0;\n  let microtaskCallbacks = [];\n  let microtaskNodeContent = 0;\n  let microtaskNode = document.createTextNode('');\n  new window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});\n\n  function microtaskFlush() {\n    const len = microtaskCallbacks.length;\n    for (let i = 0; i < len; i++) {\n      let cb = microtaskCallbacks[i];\n      if (cb) {\n        try {\n          cb();\n        } catch (e) {\n          setTimeout(() => { throw e });\n        }\n      }\n    }\n    microtaskCallbacks.splice(0, len);\n    microtaskLastHandle += len;\n  }\n\n  /**\n   * Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.  Each sub-module provides a standard `run(fn)` interface that returns a\n   * handle, and a `cancel(handle)` interface for canceling async tasks before\n   * they run.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides a number of strategies for enqueuing asynchronous\n   * tasks.\n   */\n  Polymer.Async = {\n\n    /**\n     * Async interface wrapper around `setTimeout`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `setTimeout`.\n     */\n    timeOut: {\n      /**\n       * Returns a sub-module with the async interface providing the provided\n       * delay.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} delay Time to wait before calling callbacks in ms\n       * @return {AsyncInterface} An async timeout interface\n       */\n      after(delay) {\n        return  {\n          run(fn) { return setTimeout(fn, delay) },\n          cancel: window.clearTimeout.bind(window)\n        }\n      },\n      /**\n       * Enqueues a function called in the next task.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {Function} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run: window.setTimeout.bind(window),\n      /**\n       * Cancels a previously enqueued `timeOut` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.clearTimeout.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestAnimationFrame`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestAnimationFrame`.\n     */\n    animationFrame: {\n      /**\n       * Enqueues a function called at `requestAnimationFrame` timing.\n       *\n       * @memberof Polymer.Async.animationFrame\n       * @param {Function} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run: window.requestAnimationFrame.bind(window),\n      /**\n       * Cancels a previously enqueued `animationFrame` callback.\n       *\n       * @memberof Polymer.Async.timeOut\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel: window.cancelAnimationFrame.bind(window)\n    },\n\n    /**\n     * Async interface wrapper around `requestIdleCallback`.  Falls back to\n     * `setTimeout` on browsers that do not support `requestIdleCallback`.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface wrapper around `requestIdleCallback`.\n     */\n    idlePeriod: {\n      /**\n       * Enqueues a function called at `requestIdleCallback` timing.\n       *\n       * @memberof Polymer.Async.idlePeriod\n       * @param {function(IdleDeadline)} fn Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run(fn) {\n        return window.requestIdleCallback ?\n          window.requestIdleCallback(fn) :\n          window.setTimeout(fn, 16);\n      },\n      /**\n       * Cancels a previously enqueued `idlePeriod` callback.\n       *\n       * @memberof Polymer.Async.idlePeriod\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        window.cancelIdleCallback ?\n          window.cancelIdleCallback(handle) :\n          window.clearTimeout(handle);\n      }\n    },\n\n    /**\n     * Async interface for enqueueing callbacks that run at microtask timing.\n     *\n     * Note that microtask timing is achieved via a single `MutationObserver`,\n     * and thus callbacks enqueued with this API will all run in a single\n     * batch, and not interleaved with other microtasks such as promises.\n     * Promises are avoided as an implementation choice for the time being\n     * due to Safari bugs that cause Promises to lack microtask guarantees.\n     *\n     * @namespace\n     * @memberof Polymer.Async\n     * @summary Async interface for enqueueing callbacks that run at microtask\n     *   timing.\n     */\n    microTask: {\n\n      /**\n       * Enqueues a function called at microtask timing.\n       *\n       * @memberof Polymer.Async.microTask\n       * @param {Function} callback Callback to run\n       * @return {number} Handle used for canceling task\n       */\n      run(callback) {\n        microtaskNode.textContent = microtaskNodeContent++;\n        microtaskCallbacks.push(callback);\n        return microtaskCurrHandle++;\n      },\n\n      /**\n       * Cancels a previously enqueued `microTask` callback.\n       *\n       * @memberof Polymer.Async.microTask\n       * @param {number} handle Handle returned from `run` of callback to cancel\n       */\n      cancel(handle) {\n        const idx = handle - microtaskLastHandle;\n        if (idx >= 0) {\n          if (!microtaskCallbacks[idx]) {\n            throw new Error('invalid async handle: ' + handle);\n          }\n          microtaskCallbacks[idx] = null;\n        }\n      }\n\n    }\n  };\n\n})();\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/utils/async.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n<link rel=\"import\" href=\"lib/mixins/element-mixin.html\">\n<script>\n(function() {\n  'use strict';\n\n  /**\n   * Base class that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * @customElement\n   * @polymer\n   * @memberof Polymer\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @extends HTMLElement\n   * @appliesMixin Polymer.ElementMixin\n   * @summary Custom element base class that provides the core API for Polymer's\n   *   key meta-programming features including template stamping, data-binding,\n   *   attribute deserialization, and property change observation\n   */\n  const Element = Polymer.ElementMixin(HTMLElement);\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @extends {HTMLElement}\n   */\n  Polymer.Element = Element;\n})();\n</script>\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/polymer-element.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n\n\n<link rel=\"import\" href=\"../utils/boot.html\">\n<link rel=\"import\" href=\"../utils/mixin.html\">\n<link rel=\"import\" href=\"../utils/path.html\">\n<!-- for notify, reflect -->\n<link rel=\"import\" href=\"../utils/case-map.html\">\n<link rel=\"import\" href=\"property-accessors.html\">\n<!-- for annotated effects -->\n<link rel=\"import\" href=\"template-stamp.html\">\n\n\n<script>\n(function() {\n\n  'use strict';\n\n  /** @const {Object} */\n  const CaseMap = Polymer.CaseMap;\n\n  // Monotonically increasing unique ID used for de-duping effects triggered\n  // from multiple properties in the same turn\n  let dedupeId = 0;\n\n  /**\n   * Property effect types; effects are stored on the prototype using these keys\n   * @enum {string}\n   */\n  const TYPES = {\n    COMPUTE: '__computeEffects',\n    REFLECT: '__reflectEffects',\n    NOTIFY: '__notifyEffects',\n    PROPAGATE: '__propagateEffects',\n    OBSERVE: '__observeEffects',\n    READ_ONLY: '__readOnly'\n  }\n\n  /**\n   * @typedef {{\n   * name: (string | undefined),\n   * structured: (boolean | undefined),\n   * wildcard: (boolean | undefined)\n   * }}\n   */\n  let DataTrigger; //eslint-disable-line no-unused-vars\n\n  /**\n   * @typedef {{\n   * info: ?,\n   * trigger: (!DataTrigger | undefined),\n   * fn: (!Function | undefined)\n   * }}\n   */\n  let DataEffect; //eslint-disable-line no-unused-vars\n\n  let PropertyEffectsType; //eslint-disable-line no-unused-vars\n\n  /**\n   * Ensures that the model has an own-property map of effects for the given type.\n   * The model may be a prototype or an instance.\n   *\n   * Property effects are stored as arrays of effects by property in a map,\n   * by named type on the model. e.g.\n   *\n   *   __computeEffects: {\n   *     foo: [ ... ],\n   *     bar: [ ... ]\n   *   }\n   *\n   * If the model does not yet have an effect map for the type, one is created\n   * and returned.  If it does, but it is not an own property (i.e. the\n   * prototype had effects), the the map is deeply cloned and the copy is\n   * set on the model and returned, ready for new effects to be added.\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} type Property effect type\n   * @return {Object} The own-property map of effects for the given type\n   * @private\n   */\n  function ensureOwnEffectMap(model, type) {\n    let effects = model[type];\n    if (!effects) {\n      effects = model[type] = {};\n    } else if (!model.hasOwnProperty(type)) {\n      effects = model[type] = Object.create(model[type]);\n      for (let p in effects) {\n        let protoFx = effects[p];\n        let instFx = effects[p] = Array(protoFx.length);\n        for (let i=0; i<protoFx.length; i++) {\n          instFx[i] = protoFx[i];\n        }\n      }\n    }\n    return effects;\n  }\n\n  // -- effects ----------------------------------------------\n\n  /**\n   * Runs all effects of a given type for the given set of property changes\n   * on an instance.\n   *\n   * @param {!PropertyEffectsType} inst The instance with effects to run\n   * @param {Object} effects Object map of property-to-Array of effects\n   * @param {Object} props Bag of current property changes\n   * @param {Object=} oldProps Bag of previous values for changed properties\n   * @param {boolean=} hasPaths True with `props` contains one or more paths\n   * @param {*=} extraArgs Additional metadata to pass to effect function\n   * @return {boolean} True if an effect ran for this property\n   * @private\n   */\n  function runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {\n    if (effects) {\n      let ran = false;\n      let id = dedupeId++;\n      for (let prop in props) {\n        if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {\n          ran = true;\n        }\n      }\n      return ran;\n    }\n    return false;\n  }\n\n  /**\n   * Runs a list of effects for a given property.\n   *\n   * @param {!PropertyEffectsType} inst The instance with effects to run\n   * @param {Object} effects Object map of property-to-Array of effects\n   * @param {number} dedupeId Counter used for de-duping effects\n   * @param {string} prop Name of changed property\n   * @param {*} props Changed properties\n   * @param {*} oldProps Old properties\n   * @param {boolean=} hasPaths True with `props` contains one or more paths\n   * @param {*=} extraArgs Additional metadata to pass to effect function\n   * @return {boolean} True if an effect ran for this property\n   * @private\n   */\n  function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {\n    let ran = false;\n    let rootProperty = hasPaths ? Polymer.Path.root(prop) : prop;\n    let fxs = effects[rootProperty];\n    if (fxs) {\n      for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {\n        if ((!fx.info || fx.info.lastRun !== dedupeId) &&\n            (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {\n          if (fx.info) {\n            fx.info.lastRun = dedupeId;\n          }\n          fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);\n          ran = true;\n        }\n      }\n    }\n    return ran;\n  }\n\n  /**\n   * Determines whether a property/path that has changed matches the trigger\n   * criteria for an effect.  A trigger is a descriptor with the following\n   * structure, which matches the descriptors returned from `parseArg`.\n   * e.g. for `foo.bar.*`:\n   * ```\n   * trigger: {\n   *   name: 'a.b',\n   *   structured: true,\n   *   wildcard: true\n   * }\n   * ```\n   * If no trigger is given, the path is deemed to match.\n   *\n   * @param {string} path Path or property that changed\n   * @param {DataTrigger} trigger Descriptor\n   * @return {boolean} Whether the path matched the trigger\n   */\n  function pathMatchesTrigger(path, trigger) {\n    if (trigger) {\n      let triggerPath = trigger.name;\n      return (triggerPath == path) ||\n        (trigger.structured && Polymer.Path.isAncestor(triggerPath, path)) ||\n        (trigger.wildcard && Polymer.Path.isDescendant(triggerPath, path));\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Implements the \"observer\" effect.\n   *\n   * Calls the method with `info.methodName` on the instance, passing the\n   * new and old values.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @private\n   */\n  function runObserverEffect(inst, property, props, oldProps, info) {\n    let fn = inst[info.methodName];\n    let changedProp = info.property;\n    if (fn) {\n      fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);\n    } else if (!info.dynamicFn) {\n      console.warn('observer method `' + info.methodName + '` not defined');\n    }\n  }\n\n  /**\n   * Runs \"notify\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * will dispatch path notification events in the case that the property\n   * changed was a path and the root property for that path didn't have a\n   * \"notify\" effect.  This is to maintain 1.0 behavior that did not require\n   * `notify: true` to ensure object sub-property notifications were\n   * sent.\n   *\n   * @param {!PropertyEffectsType} inst The instance with effects to run\n   * @param {Object} notifyProps Bag of properties to notify\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {\n    // Notify\n    let fxs = inst[TYPES.NOTIFY];\n    let notified;\n    let id = dedupeId++;\n    // Try normal notify effects; if none, fall back to try path notification\n    for (let prop in notifyProps) {\n      if (notifyProps[prop]) {\n        if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {\n          notified = true;\n        } else if (hasPaths && notifyPath(inst, prop, props)) {\n          notified = true;\n        }\n      }\n    }\n    // Flush host if we actually notified and host was batching\n    // And the host has already initialized clients; this prevents\n    // an issue with a host observing data changes before clients are ready.\n    let host;\n    if (notified && (host = inst.__dataHost) && host._invalidateProperties) {\n      host._invalidateProperties();\n    }\n  }\n\n  /**\n   * Dispatches {property}-changed events with path information in the detail\n   * object to indicate a sub-path of the property was changed.\n   *\n   * @param {!PropertyEffectsType} inst The element from which to fire the event\n   * @param {string} path The path that was changed\n   * @param {Object} props Bag of current property changes\n   * @return {boolean} Returns true if the path was notified\n   * @private\n   */\n  function notifyPath(inst, path, props) {\n    let rootProperty = Polymer.Path.root(path);\n    if (rootProperty !== path) {\n      let eventName = Polymer.CaseMap.camelToDashCase(rootProperty) + '-changed';\n      dispatchNotifyEvent(inst, eventName, props[path], path);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Dispatches {property}-changed events to indicate a property (or path)\n   * changed.\n   *\n   * @param {!PropertyEffectsType} inst The element from which to fire the event\n   * @param {string} eventName The name of the event to send ('{property}-changed')\n   * @param {*} value The value of the changed property\n   * @param {string | null | undefined} path If a sub-path of this property changed, the path\n   *   that changed (optional).\n   * @private\n   * @suppress {invalidCasts}\n   */\n  function dispatchNotifyEvent(inst, eventName, value, path) {\n    let detail = {\n      value: value,\n      queueProperty: true\n    };\n    if (path) {\n      detail.path = path;\n    }\n    /** @type {!HTMLElement} */(inst).dispatchEvent(new CustomEvent(eventName, { detail }));\n  }\n\n  /**\n   * Implements the \"notify\" effect.\n   *\n   * Dispatches a non-bubbling event named `info.eventName` on the instance\n   * with a detail object containing the new `value`.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {\n    let rootProperty = hasPaths ? Polymer.Path.root(property) : property;\n    let path = rootProperty != property ? property : null;\n    let value = path ? Polymer.Path.get(inst, path) : inst.__data[property];\n    if (path && value === undefined) {\n      value = props[property];  // specifically for .splices\n    }\n    dispatchNotifyEvent(inst, info.eventName, value, path);\n  }\n\n  /**\n   * Handler function for 2-way notification events. Receives context\n   * information captured in the `addNotifyListener` closure from the\n   * `__notifyListeners` metadata.\n   *\n   * Sets the value of the notified property to the host property or path.  If\n   * the event contained path information, translate that path to the host\n   * scope's name for that path first.\n   *\n   * @param {CustomEvent} event Notification event (e.g. '<property>-changed')\n   * @param {!PropertyEffectsType} inst Host element instance handling the notification event\n   * @param {string} fromProp Child element property that was bound\n   * @param {string} toPath Host property/path that was bound\n   * @param {boolean} negate Whether the binding was negated\n   * @private\n   */\n  function handleNotification(event, inst, fromProp, toPath, negate) {\n    let value;\n    let detail = /** @type {Object} */(event.detail);\n    let fromPath = detail && detail.path;\n    if (fromPath) {\n      toPath = Polymer.Path.translate(fromProp, toPath, fromPath);\n      value = detail && detail.value;\n    } else {\n      value = event.target[fromProp];\n    }\n    value = negate ? !value : value;\n    if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {\n      if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))\n        && (!detail || !detail.queueProperty)) {\n        inst._invalidateProperties();\n      }\n    }\n  }\n\n  /**\n   * Implements the \"reflect\" effect.\n   *\n   * Sets the attribute named `info.attrName` to the given property value.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @private\n   */\n  function runReflectEffect(inst, property, props, oldProps, info) {\n    let value = inst.__data[property];\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));\n    }\n    inst._propertyToAttribute(property, info.attrName, value);\n  }\n\n  /**\n   * Runs \"computed\" effects for a set of changed properties.\n   *\n   * This method differs from the generic `runEffects` method in that it\n   * continues to run computed effects based on the output of each pass until\n   * there are no more newly computed properties.  This ensures that all\n   * properties that will be computed by the initial set of changes are\n   * computed before other effects (binding propagation, observers, and notify)\n   * run.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {!Object} changedProps Bag of changed properties\n   * @param {!Object} oldProps Bag of previous values for changed properties\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @private\n   */\n  function runComputedEffects(inst, changedProps, oldProps, hasPaths) {\n    let computeEffects = inst[TYPES.COMPUTE];\n    if (computeEffects) {\n      let inputProps = changedProps;\n      while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {\n        Object.assign(oldProps, inst.__dataOld);\n        Object.assign(changedProps, inst.__dataPending);\n        inputProps = inst.__dataPending;\n        inst.__dataPending = null;\n      }\n    }\n  }\n\n  /**\n   * Implements the \"computed property\" effect by running the method with the\n   * values of the arguments specified in the `info` object and setting the\n   * return value to the computed property specified.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @private\n   */\n  function runComputedEffect(inst, property, props, oldProps, info) {\n    let result = runMethodEffect(inst, property, props, oldProps, info);\n    let computedProp = info.methodInfo;\n    if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {\n      inst._setPendingProperty(computedProp, result, true);\n    } else {\n      inst[computedProp] = result;\n    }\n  }\n\n  /**\n   * Computes path changes based on path links set up using the `linkPaths`\n   * API.\n   *\n   * @param {!PropertyEffectsType} inst The instance whose props are changing\n   * @param {string | !Array<(string|number)>} path Path that has changed\n   * @param {*} value Value of changed path\n   * @private\n   */\n  function computeLinkedPaths(inst, path, value) {\n    let links = inst.__dataLinkedPaths;\n    if (links) {\n      let link;\n      for (let a in links) {\n        let b = links[a];\n        if (Polymer.Path.isDescendant(a, path)) {\n          link = Polymer.Path.translate(a, b, path);\n          inst._setPendingPropertyOrPath(link, value, true, true);\n        } else if (Polymer.Path.isDescendant(b, path)) {\n          link = Polymer.Path.translate(b, a, path);\n          inst._setPendingPropertyOrPath(link, value, true, true);\n        }\n      }\n    }\n  }\n\n  // -- bindings ----------------------------------------------\n\n  /**\n   * Adds binding metadata to the current `nodeInfo`, and binding effects\n   * for all part dependencies to `templateInfo`.\n   *\n   * @param {Function} constructor Class that `_parseTemplate` is currently\n   *   running on\n   * @param {TemplateInfo} templateInfo Template metadata for current template\n   * @param {NodeInfo} nodeInfo Node metadata for current template node\n   * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'\n   * @param {string} target Target property name\n   * @param {!Array<!BindingPart>} parts Array of binding part metadata\n   * @param {string=} literal Literal text surrounding binding parts (specified\n   *   only for 'property' bindings, since these must be initialized as part\n   *   of boot-up)\n   * @private\n   */\n  function addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {\n    // Create binding metadata and add to nodeInfo\n    nodeInfo.bindings = nodeInfo.bindings || [];\n    let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };\n    nodeInfo.bindings.push(binding);\n    // Add listener info to binding metadata\n    if (shouldAddListener(binding)) {\n      let {event, negate} = binding.parts[0];\n      binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');\n      binding.listenerNegate = negate;\n    }\n    // Add \"propagate\" property effects to templateInfo\n    let index = templateInfo.nodeInfoList.length;\n    for (let i=0; i<binding.parts.length; i++) {\n      let part = binding.parts[i];\n      part.compoundIndex = i;\n      addEffectForBindingPart(constructor, templateInfo, binding, part, index);\n    }\n  }\n\n  /**\n   * Adds property effects to the given `templateInfo` for the given binding\n   * part.\n   *\n   * @param {Function} constructor Class that `_parseTemplate` is currently\n   *   running on\n   * @param {TemplateInfo} templateInfo Template metadata for current template\n   * @param {!Binding} binding Binding metadata\n   * @param {!BindingPart} part Binding part metadata\n   * @param {number} index Index into `nodeInfoList` for this node\n   */\n  function addEffectForBindingPart(constructor, templateInfo, binding, part, index) {\n    if (!part.literal) {\n      if (binding.kind === 'attribute' && binding.target[0] === '-') {\n        console.warn('Cannot set attribute ' + binding.target +\n          ' because \"-\" is not a valid attribute starting character');\n      } else {\n        let dependencies = part.dependencies;\n        let info = { index, binding, part, evaluator: constructor };\n        for (let j=0; j<dependencies.length; j++) {\n          let trigger = dependencies[j];\n          if (typeof trigger == 'string') {\n            trigger = parseArg(trigger);\n            trigger.wildcard = true;\n          }\n          constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {\n            fn: runBindingEffect,\n            info, trigger\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Implements the \"binding\" (property/path binding) effect.\n   *\n   * Note that binding syntax is overridable via `_parseBindings` and\n   * `_evaluateBinding`.  This method will call `_evaluateBinding` for any\n   * non-literal parts returned from `_parseBindings`.  However,\n   * there is no support for _path_ bindings via custom binding parts,\n   * as this is specific to Polymer's path binding syntax.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} path Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @param {boolean} hasPaths True with `props` contains one or more paths\n   * @param {Array} nodeList List of nodes associated with `nodeInfoList` template\n   *   metadata\n   * @private\n   */\n  function runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {\n    let node = nodeList[info.index];\n    let binding = info.binding;\n    let part = info.part;\n    // Subpath notification: transform path and set to client\n    // e.g.: foo=\"{{obj.sub}}\", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop\n    if (hasPaths && part.source && (path.length > part.source.length) &&\n        (binding.kind == 'property') && !binding.isCompound &&\n        node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {\n      let value = props[path];\n      path = Polymer.Path.translate(part.source, binding.target, path);\n      if (node._setPendingPropertyOrPath(path, value, false, true)) {\n        inst._enqueueClient(node);\n      }\n    } else {\n      let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);\n      // Propagate value to child\n      applyBindingValue(inst, node, binding, part, value);\n    }\n  }\n\n  /**\n   * Sets the value for an \"binding\" (binding) effect to a node,\n   * either as a property or attribute.\n   *\n   * @param {!PropertyEffectsType} inst The instance owning the binding effect\n   * @param {Node} node Target node for binding\n   * @param {!Binding} binding Binding metadata\n   * @param {!BindingPart} part Binding part metadata\n   * @param {*} value Value to set\n   * @private\n   */\n  function applyBindingValue(inst, node, binding, part, value) {\n    value = computeBindingValue(node, value, binding, part);\n    if (Polymer.sanitizeDOMValue) {\n      value = Polymer.sanitizeDOMValue(value, binding.target, binding.kind, node);\n    }\n    if (binding.kind == 'attribute') {\n      // Attribute binding\n      inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);\n    } else {\n      // Property binding\n      let prop = binding.target;\n      if (node.__dataHasAccessor && node.__dataHasAccessor[prop]) {\n        if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {\n          if (node._setPendingProperty(prop, value)) {\n            inst._enqueueClient(node);\n          }\n        }\n      } else  {\n        inst._setUnmanagedPropertyToNode(node, prop, value);\n      }\n    }\n  }\n\n  /**\n   * Transforms an \"binding\" effect value based on compound & negation\n   * effect metadata, as well as handling for special-case properties\n   *\n   * @param {Node} node Node the value will be set to\n   * @param {*} value Value to set\n   * @param {!Binding} binding Binding metadata\n   * @param {!BindingPart} part Binding part metadata\n   * @return {*} Transformed value to set\n   * @private\n   */\n  function computeBindingValue(node, value, binding, part) {\n    if (binding.isCompound) {\n      let storage = node.__dataCompoundStorage[binding.target];\n      storage[part.compoundIndex] = value;\n      value = storage.join('');\n    }\n    if (binding.kind !== 'attribute') {\n      // Some browsers serialize `undefined` to `\"undefined\"`\n      if (binding.target === 'textContent' ||\n          (node.localName == 'input' && binding.target == 'value')) {\n        value = value == undefined ? '' : value;\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Returns true if a binding's metadata meets all the requirements to allow\n   * 2-way binding, and therefore a `<property>-changed` event listener should be\n   * added:\n   * - used curly braces\n   * - is a property (not attribute) binding\n   * - is not a textContent binding\n   * - is not compound\n   *\n   * @param {!Binding} binding Binding metadata\n   * @return {boolean} True if 2-way listener should be added\n   * @private\n   */\n  function shouldAddListener(binding) {\n    return Boolean(binding.target) &&\n           binding.kind != 'attribute' &&\n           binding.kind != 'text' &&\n           !binding.isCompound &&\n           binding.parts[0].mode === '{';\n  }\n\n  /**\n   * Setup compound binding storage structures, notify listeners, and dataHost\n   * references onto the bound nodeList.\n   *\n   * @param {!PropertyEffectsType} inst Instance that bas been previously bound\n   * @param {TemplateInfo} templateInfo Template metadata\n   * @private\n   */\n  function setupBindings(inst, templateInfo) {\n    // Setup compound storage, dataHost, and notify listeners\n    let {nodeList, nodeInfoList} = templateInfo;\n    if (nodeInfoList.length) {\n      for (let i=0; i < nodeInfoList.length; i++) {\n        let info = nodeInfoList[i];\n        let node = nodeList[i];\n        let bindings = info.bindings;\n        if (bindings) {\n          for (let i=0; i<bindings.length; i++) {\n            let binding = bindings[i];\n            setupCompoundStorage(node, binding);\n            addNotifyListener(node, inst, binding);\n          }\n        }\n        node.__dataHost = inst;\n      }\n    }\n  }\n\n  /**\n   * Initializes `__dataCompoundStorage` local storage on a bound node with\n   * initial literal data for compound bindings, and sets the joined\n   * literal parts to the bound property.\n   *\n   * When changes to compound parts occur, they are first set into the compound\n   * storage array for that property, and then the array is joined to result in\n   * the final value set to the property/attribute.\n   *\n   * @param {Node} node Bound node to initialize\n   * @param {Binding} binding Binding metadata\n   * @private\n   */\n  function setupCompoundStorage(node, binding) {\n    if (binding.isCompound) {\n      // Create compound storage map\n      let storage = node.__dataCompoundStorage ||\n        (node.__dataCompoundStorage = {});\n      let parts = binding.parts;\n      // Copy literals from parts into storage for this binding\n      let literals = new Array(parts.length);\n      for (let j=0; j<parts.length; j++) {\n        literals[j] = parts[j].literal;\n      }\n      let target = binding.target;\n      storage[target] = literals;\n      // Configure properties with their literal parts\n      if (binding.literal && binding.kind == 'property') {\n        node[target] = binding.literal;\n      }\n    }\n  }\n\n  /**\n   * Adds a 2-way binding notification event listener to the node specified\n   *\n   * @param {Object} node Child element to add listener to\n   * @param {!PropertyEffectsType} inst Host element instance to handle notification event\n   * @param {Binding} binding Binding metadata\n   * @private\n   */\n  function addNotifyListener(node, inst, binding) {\n    if (binding.listenerEvent) {\n      let part = binding.parts[0];\n      node.addEventListener(binding.listenerEvent, function(e) {\n        handleNotification(e, inst, binding.target, part.source, part.negate);\n      });\n    }\n  }\n\n  // -- for method-based effects (complexObserver & computed) --------------\n\n  /**\n   * Adds property effects for each argument in the method signature (and\n   * optionally, for the method name if `dynamic` is true) that calls the\n   * provided effect function.\n   *\n   * @param {Element | Object} model Prototype or instance\n   * @param {!MethodSignature} sig Method signature metadata\n   * @param {string} type Type of property effect to add\n   * @param {Function} effectFn Function to run when arguments change\n   * @param {*=} methodInfo Effect-specific information to be included in\n   *   method effect metadata\n   * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n   *   method names should be included as a dependency to the effect. Note,\n   *   defaults to true if the signature is static (sig.static is true).\n   * @private\n   */\n  function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {\n    dynamicFn = sig.static || (dynamicFn &&\n      (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));\n    let info = {\n      methodName: sig.methodName,\n      args: sig.args,\n      methodInfo,\n      dynamicFn\n    };\n    for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n      if (!arg.literal) {\n        model._addPropertyEffect(arg.rootProperty, type, {\n          fn: effectFn, info: info, trigger: arg\n        });\n      }\n    }\n    if (dynamicFn) {\n      model._addPropertyEffect(sig.methodName, type, {\n        fn: effectFn, info: info\n      });\n    }\n  }\n\n  /**\n   * Calls a method with arguments marshaled from properties on the instance\n   * based on the method signature contained in the effect metadata.\n   *\n   * Multi-property observers, computed properties, and inline computing\n   * functions call this function to invoke the method, then use the return\n   * value accordingly.\n   *\n   * @param {!PropertyEffectsType} inst The instance the effect will be run on\n   * @param {string} property Name of property\n   * @param {Object} props Bag of current property changes\n   * @param {Object} oldProps Bag of previous values for changed properties\n   * @param {?} info Effect metadata\n   * @return {*} Returns the return value from the method invocation\n   * @private\n   */\n  function runMethodEffect(inst, property, props, oldProps, info) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    let context = inst._methodHost || inst;\n    let fn = context[info.methodName];\n    if (fn) {\n      let args = marshalArgs(inst.__data, info.args, property, props);\n      return fn.apply(context, args);\n    } else if (!info.dynamicFn) {\n      console.warn('method `' + info.methodName + '` not defined');\n    }\n  }\n\n  const emptyArray = [];\n\n  // Regular expressions used for binding\n  const IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\n  const NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\n  const SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\n  const DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\n  const STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\n  const ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\\\s*' + ')';\n  const ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\n  const ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                                '(?:' + ARGUMENTS + '?' + ')' +\n                              '\\\\)\\\\s*' + ')';\n  const BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\n  const OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\n  const CLOSE_BRACKET = '(?:]]|}})';\n  const NEGATE = '(?:(!)\\\\s*)?'; // Group 2\n  const EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\n  const bindingRegex = new RegExp(EXPRESSION, \"g\");\n\n  /**\n   * Create a string from binding parts of all the literal parts\n   *\n   * @param {!Array<BindingPart>} parts All parts to stringify\n   * @return {string} String made from the literal parts\n   */\n  function literalFromParts(parts) {\n    let s = '';\n    for (let i=0; i<parts.length; i++) {\n      let literal = parts[i].literal;\n      s += literal || '';\n    }\n    return s;\n  }\n\n  /**\n   * Parses an expression string for a method signature, and returns a metadata\n   * describing the method in terms of `methodName`, `static` (whether all the\n   * arguments are literals), and an array of `args`\n   *\n   * @param {string} expression The expression to parse\n   * @return {?MethodSignature} The method metadata object if a method expression was\n   *   found, otherwise `undefined`\n   * @private\n   */\n  function parseMethod(expression) {\n    // tries to match valid javascript property names\n    let m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n    if (m) {\n      let methodName = m[1];\n      let sig = { methodName, static: true, args: emptyArray };\n      if (m[2].trim()) {\n        // replace escaped commas with comma entity, split on un-escaped commas\n        let args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n        return parseArgs(args, sig);\n      } else {\n        return sig;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Parses an array of arguments and sets the `args` property of the supplied\n   * signature metadata object. Sets the `static` property to false if any\n   * argument is a non-literal.\n   *\n   * @param {!Array<string>} argList Array of argument names\n   * @param {!MethodSignature} sig Method signature metadata object\n   * @return {!MethodSignature} The updated signature metadata object\n   * @private\n   */\n  function parseArgs(argList, sig) {\n    sig.args = argList.map(function(rawArg) {\n      let arg = parseArg(rawArg);\n      if (!arg.literal) {\n        sig.static = false;\n      }\n      return arg;\n    }, this);\n    return sig;\n  }\n\n  /**\n   * Parses an individual argument, and returns an argument metadata object\n   * with the following fields:\n   *\n   *   {\n   *     value: 'prop',        // property/path or literal value\n   *     literal: false,       // whether argument is a literal\n   *     structured: false,    // whether the property is a path\n   *     rootProperty: 'prop', // the root property of the path\n   *     wildcard: false       // whether the argument was a wildcard '.*' path\n   *   }\n   *\n   * @param {string} rawArg The string value of the argument\n   * @return {!MethodArg} Argument metadata object\n   * @private\n   */\n  function parseArg(rawArg) {\n    // clean up whitespace\n    let arg = rawArg.trim()\n      // replace comma entity with comma\n      .replace(/&comma;/g, ',')\n      // repair extra escape sequences; note only commas strictly need\n      // escaping, but we allow any other char to be escaped since its\n      // likely users will do this\n      .replace(/\\\\(.)/g, '\\$1')\n      ;\n    // basic argument descriptor\n    let a = {\n      name: arg,\n      value: '',\n      literal: false\n    };\n    // detect literal value (must be String or Number)\n    let fc = arg[0];\n    if (fc === '-') {\n      fc = arg[1];\n    }\n    if (fc >= '0' && fc <= '9') {\n      fc = '#';\n    }\n    switch(fc) {\n      case \"'\":\n      case '\"':\n        a.value = arg.slice(1, -1);\n        a.literal = true;\n        break;\n      case '#':\n        a.value = Number(arg);\n        a.literal = true;\n        break;\n    }\n    // if not literal, look for structured path\n    if (!a.literal) {\n      a.rootProperty = Polymer.Path.root(arg);\n      // detect structured path (has dots)\n      a.structured = Polymer.Path.isPath(arg);\n      if (a.structured) {\n        a.wildcard = (arg.slice(-2) == '.*');\n        if (a.wildcard) {\n          a.name = arg.slice(0, -2);\n        }\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Gather the argument values for a method specified in the provided array\n   * of argument metadata.\n   *\n   * The `path` and `value` arguments are used to fill in wildcard descriptor\n   * when the method is being called as a result of a path notification.\n   *\n   * @param {Object} data Instance data storage object to read properties from\n   * @param {!Array<!MethodArg>} args Array of argument metadata\n   * @param {string} path Property/path name that triggered the method effect\n   * @param {Object} props Bag of current property changes\n   * @return {Array<*>} Array of argument values\n   * @private\n   */\n  function marshalArgs(data, args, path, props) {\n    let values = [];\n    for (let i=0, l=args.length; i<l; i++) {\n      let arg = args[i];\n      let name = arg.name;\n      let v;\n      if (arg.literal) {\n        v = arg.value;\n      } else {\n        if (arg.structured) {\n          v = Polymer.Path.get(data, name);\n          // when data is not stored e.g. `splices`\n          if (v === undefined) {\n            v = props[name];\n          }\n        } else {\n          v = data[name];\n        }\n      }\n      if (arg.wildcard) {\n        // Only send the actual path changed info if the change that\n        // caused the observer to run matched the wildcard\n        let baseChanged = (name.indexOf(path + '.') === 0);\n        let matches = (path.indexOf(name) === 0 && !baseChanged);\n        values[i] = {\n          path: matches ? path : name,\n          value: matches ? props[path] : v,\n          base: v\n        };\n      } else {\n        values[i] = v;\n      }\n    }\n    return values;\n  }\n\n  // data api\n\n  /**\n   * Sends array splice notifications (`.splices` and `.length`)\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {!PropertyEffectsType} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {Array} splices Array of splice records\n   * @private\n   */\n  function notifySplices(inst, array, path, splices) {\n    let splicesPath = path + '.splices';\n    inst.notifyPath(splicesPath, { indexSplices: splices });\n    inst.notifyPath(path + '.length', array.length);\n    // Null here to allow potentially large splice records to be GC'ed.\n    inst.__data[splicesPath] = {indexSplices: null};\n  }\n\n  /**\n   * Creates a splice record and sends an array splice notification for\n   * the described mutation\n   *\n   * Note: this implementation only accepts normalized paths\n   *\n   * @param {!PropertyEffectsType} inst Instance to send notifications to\n   * @param {Array} array The array the mutations occurred on\n   * @param {string} path The path to the array that was mutated\n   * @param {number} index Index at which the array mutation occurred\n   * @param {number} addedCount Number of added items\n   * @param {Array} removed Array of removed items\n   * @private\n   */\n  function notifySplice(inst, array, path, index, addedCount, removed) {\n    notifySplices(inst, array, path, [{\n      index: index,\n      addedCount: addedCount,\n      removed: removed,\n      object: array,\n      type: 'splice'\n    }]);\n  }\n\n  /**\n   * Returns an upper-cased version of the string.\n   *\n   * @param {string} name String to uppercase\n   * @return {string} Uppercased string\n   * @private\n   */\n  function upper(name) {\n    return name[0].toUpperCase() + name.substring(1);\n  }\n\n  /**\n   * Element class mixin that provides meta-programming for Polymer's template\n   * binding and data observation (collectively, \"property effects\") system.\n   *\n   * This mixin uses provides the following key static methods for adding\n   * property effects to an element class:\n   * - `addPropertyEffect`\n   * - `createPropertyObserver`\n   * - `createMethodObserver`\n   * - `createNotifyingProperty`\n   * - `createReadOnlyProperty`\n   * - `createReflectedProperty`\n   * - `createComputedProperty`\n   * - `bindTemplate`\n   *\n   * Each method creates one or more property accessors, along with metadata\n   * used by this mixin's implementation of `_propertiesChanged` to perform\n   * the property effects.\n   *\n   * Underscored versions of the above methods also exist on the element\n   * prototype for adding property effects on instances at runtime.\n   *\n   * Note that this mixin overrides several `PropertyAccessors` methods, in\n   * many cases to maintain guarantees provided by the Polymer 1.x features;\n   * notably it changes property accessors to be synchronous by default\n   * whereas the default when using `PropertyAccessors` standalone is to be\n   * async by default.\n   *\n   * @mixinFunction\n   * @polymer\n   * @appliesMixin Polymer.TemplateStamp\n   * @appliesMixin Polymer.PropertyAccessors\n   * @memberof Polymer\n   * @summary Element class mixin that provides meta-programming for Polymer's\n   * template binding and data observation system.\n   */\n  Polymer.PropertyEffects = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @constructor\n     * @extends {superClass}\n     * @implements {Polymer_PropertyAccessors}\n     * @implements {Polymer_TemplateStamp}\n     * @unrestricted\n     */\n    const propertyEffectsBase = Polymer.TemplateStamp(Polymer.PropertyAccessors(superClass));\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @implements {Polymer_PropertyEffects}\n     * @extends {propertyEffectsBase}\n     * @unrestricted\n     */\n    class PropertyEffects extends propertyEffectsBase {\n\n      constructor() {\n        super();\n        /** @type {boolean} */\n        this.__dataClientsReady;\n        /** @type {Array} */\n        this.__dataPendingClients;\n        /** @type {Object} */\n        this.__dataToNotify;\n        /** @type {Object} */\n        this.__dataLinkedPaths;\n        /** @type {boolean} */\n        this.__dataHasPaths;\n        /** @type {Object} */\n        this.__dataCompoundStorage;\n        /** @type {Polymer_PropertyEffects} */\n        this.__dataHost;\n        /** @type {!Object} */\n        this.__dataTemp;\n        /** @type {boolean} */\n        this.__dataClientsInitialized;\n        /** @type {!Object} */\n        this.__data;\n        /** @type {!Object} */\n        this.__dataPending;\n        /** @type {!Object} */\n        this.__dataOld;\n        /** @type {Object} */\n        this.__computeEffects;\n        /** @type {Object} */\n        this.__reflectEffects;\n        /** @type {Object} */\n        this.__notifyEffects;\n        /** @type {Object} */\n        this.__propagateEffects;\n        /** @type {Object} */\n        this.__observeEffects;\n        /** @type {Object} */\n        this.__readOnly;\n        /** @type {number} */\n        this.__dataCounter;\n        /** @type {!TemplateInfo} */\n        this.__templateInfo;\n      }\n\n      get PROPERTY_EFFECT_TYPES() {\n        return TYPES;\n      }\n\n      _initializeProperties() {\n        super._initializeProperties();\n        hostStack.registerHost(this);\n        this.__dataClientsReady = false;\n        this.__dataPendingClients = null;\n        this.__dataToNotify = null;\n        this.__dataLinkedPaths = null;\n        this.__dataHasPaths = false;\n        // May be set on instance prior to upgrade\n        this.__dataCompoundStorage = this.__dataCompoundStorage || null;\n        this.__dataHost = this.__dataHost || null;\n        this.__dataTemp = {};\n        this.__dataClientsInitialized = false;\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to provide a\n       * more efficient implementation of initializing properties from\n       * the prototype on the instance.\n       *\n       * @override\n       * @param {Object} props Properties to initialize on the prototype\n       */\n      _initializeProtoProperties(props) {\n        this.__data = Object.create(props);\n        this.__dataPending = Object.create(props);\n        this.__dataOld = {};\n      }\n\n      /**\n       * Overrides `Polymer.PropertyAccessors` implementation to avoid setting\n       * `_setProperty`'s `shouldNotify: true`.\n       *\n       * @override\n       * @param {Object} props Properties to initialize on the instance\n       */\n      _initializeInstanceProperties(props) {\n        let readOnly = this[TYPES.READ_ONLY];\n        for (let prop in props) {\n          if (!readOnly || !readOnly[prop]) {\n            this.__dataPending = this.__dataPending || {};\n            this.__dataOld = this.__dataOld || {};\n            this.__data[prop] = this.__dataPending[prop] = props[prop];\n          }\n        }\n      }\n\n      // Prototype setup ----------------------------------------\n\n      /**\n       * Equivalent to static `addPropertyEffect` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      _addPropertyEffect(property, type, effect) {\n        this._createPropertyAccessor(property, type == TYPES.READ_ONLY);\n        // effects are accumulated into arrays per property based on type\n        let effects = ensureOwnEffectMap(this, type)[property];\n        if (!effects) {\n          effects = this[type][property] = [];\n        }\n        effects.push(effect);\n      }\n\n      /**\n       * Removes the given property effect.\n       *\n       * @param {string} property Property the effect was associated with\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object to remove\n       */\n      _removePropertyEffect(property, type, effect) {\n        let effects = ensureOwnEffectMap(this, type)[property];\n        let idx = effects.indexOf(effect);\n        if (idx >= 0) {\n          effects.splice(idx, 1);\n        }\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a property effect\n       * of a certain type.\n       *\n       * @param {string} property Property name\n       * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasPropertyEffect(property, type) {\n        let effects = this[type];\n        return Boolean(effects && effects[property]);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"read only\"\n       * accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReadOnlyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.READ_ONLY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"notify\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasNotifyEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.NOTIFY);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"reflect to attribute\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasReflectEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.REFLECT);\n      }\n\n      /**\n       * Returns whether the current prototype/instance has a \"computed\"\n       * property effect for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if the prototype/instance has an effect of this type\n       * @protected\n       */\n      _hasComputedEffect(property) {\n        return this._hasPropertyEffect(property, TYPES.COMPUTE);\n      }\n\n      // Runtime ----------------------------------------\n\n      /**\n       * Sets a pending property or path.  If the root property of the path in\n       * question had no accessor, the path is set, otherwise it is enqueued\n       * via `_setPendingProperty`.\n       *\n       * This function isolates relatively expensive functionality necessary\n       * for the public API (`set`, `setProperties`, `notifyPath`, and property\n       * change listeners via {{...}} bindings), such that it is only done\n       * when paths enter the system, and not at every propagation step.  It\n       * also sets a `__dataHasPaths` flag on the instance which is used to\n       * fast-path slower path-matching code in the property effects host paths.\n       *\n       * `path` can be a path string or array of path parts as accepted by the\n       * public API.\n       *\n       * @param {string | !Array<number|string>} path Path to set\n       * @param {*} value Value to set\n       * @param {boolean=} shouldNotify Set to true if this change should\n       *  cause a property notification event dispatch\n       * @param {boolean=} isPathNotification If the path being set is a path\n       *   notification of an already changed value, as opposed to a request\n       *   to set and notify the change.  In the latter `false` case, a dirty\n       *   check is performed and then the value is set to the path before\n       *   enqueuing the pending property change.\n       * @return {boolean} Returns true if the property/path was enqueued in\n       *   the pending changes bag.\n       * @protected\n       */\n      _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {\n        if (isPathNotification ||\n            Polymer.Path.root(Array.isArray(path) ? path[0] : path) !== path) {\n          // Dirty check changes being set to a path against the actual object,\n          // since this is the entry point for paths into the system; from here\n          // the only dirty checks are against the `__dataTemp` cache to prevent\n          // duplicate work in the same turn only. Note, if this was a notification\n          // of a change already set to a path (isPathNotification: true),\n          // we always let the change through and skip the `set` since it was\n          // already dirty checked at the point of entry and the underlying\n          // object has already been updated\n          if (!isPathNotification) {\n            let old = Polymer.Path.get(this, path);\n            path = /** @type {string} */ (Polymer.Path.set(this, path, value));\n            // Use property-accessor's simpler dirty check\n            if (!path || !super._shouldPropertyChange(path, value, old)) {\n              return false;\n            }\n          }\n          this.__dataHasPaths = true;\n          if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {\n            computeLinkedPaths(this, path, value);\n            return true;\n          }\n        } else {\n          if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {\n            return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);\n          } else {\n            this[path] = value;\n          }\n        }\n        return false;\n      }\n\n      /**\n       * Applies a value to a non-Polymer element/node's property.\n       *\n       * The implementation makes a best-effort at binding interop:\n       * Some native element properties have side-effects when\n       * re-setting the same value (e.g. setting `<input>.value` resets the\n       * cursor position), so we do a dirty-check before setting the value.\n       * However, for better interop with non-Polymer custom elements that\n       * accept objects, we explicitly re-set object changes coming from the\n       * Polymer world (which may include deep object changes without the\n       * top reference changing), erring on the side of providing more\n       * information.\n       *\n       * Users may override this method to provide alternate approaches.\n       *\n       * @param {Node} node The node to set a property on\n       * @param {string} prop The property to set\n       * @param {*} value The value to set\n       * @protected\n       */\n      _setUnmanagedPropertyToNode(node, prop, value) {\n        // It is a judgment call that resetting primitives is\n        // \"bad\" and resettings objects is also \"good\"; alternatively we could\n        // implement a whitelist of tag & property values that should never\n        // be reset (e.g. <input>.value && <select>.value)\n        if (value !== node[prop] || typeof value == 'object') {\n          node[prop] = value;\n        }\n      }\n\n      /**\n       * Overrides the `PropertyAccessors` implementation to introduce special\n       * dirty check logic depending on the property & value being set:\n       *\n       * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})\n       *    Stored in `__dataTemp`, dirty checked against `__dataTemp`\n       * 2. Object set to simple property (e.g. 'prop': {...})\n       *    Stored in `__dataTemp` and `__data`, dirty checked against\n       *    `__dataTemp` by default implementation of `_shouldPropertyChange`\n       * 3. Primitive value set to simple property (e.g. 'prop': 42)\n       *    Stored in `__data`, dirty checked against `__data`\n       *\n       * The dirty-check is important to prevent cycles due to two-way\n       * notification, but paths and objects are only dirty checked against any\n       * previous value set during this turn via a \"temporary cache\" that is\n       * cleared when the last `_propertiesChaged` exits. This is so:\n       * a. any cached array paths (e.g. 'array.3.prop') may be invalidated\n       *    due to array mutations like shift/unshift/splice; this is fine\n       *    since path changes are dirty-checked at user entry points like `set`\n       * b. dirty-checking for objects only lasts one turn to allow the user\n       *    to mutate the object in-place and re-set it with the same identity\n       *    and have all sub-properties re-propagated in a subsequent turn.\n       *\n       * The temp cache is not necessarily sufficient to prevent invalid array\n       * paths, since a splice can happen during the same turn (with pathological\n       * user code); we could introduce a \"fixup\" for temporarily cached array\n       * paths if needed: https://github.com/Polymer/polymer/issues/4227\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @param {boolean=} shouldNotify True if property should fire notification\n       *   event (applies only for `notify: true` properties)\n       * @return {boolean} Returns true if the property changed\n       * @override\n       */\n      _setPendingProperty(property, value, shouldNotify) {\n        let isPath = this.__dataHasPaths && Polymer.Path.isPath(property);\n        let prevProps = isPath ? this.__dataTemp : this.__data;\n        if (this._shouldPropertyChange(property, value, prevProps[property])) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (!(property in this.__dataOld)) {\n            this.__dataOld[property] = this.__data[property];\n          }\n          // Paths are stored in temporary cache (cleared at end of turn),\n          // which is used for dirty-checking, all others stored in __data\n          if (isPath) {\n            this.__dataTemp[property] = value;\n          } else {\n            this.__data[property] = value;\n          }\n          // All changes go into pending property bag, passed to _propertiesChanged\n          this.__dataPending[property] = value;\n          // Track properties that should notify separately\n          if (isPath || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {\n            this.__dataToNotify = this.__dataToNotify || {};\n            this.__dataToNotify[property] = shouldNotify;\n          }\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Overrides base implementation to ensure all accessors set `shouldNotify`\n       * to true, for per-property notification tracking.\n       *\n       * @override\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Overrides `PropertyAccessor`'s default async queuing of\n       * `_propertiesChanged`: if `__dataReady` is false (has not yet been\n       * manually flushed), the function no-ops; otherwise flushes\n       * `_propertiesChanged` synchronously.\n       *\n       * @override\n       */\n      _invalidateProperties() {\n        if (this.__dataReady) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Enqueues the given client on a list of pending clients, whose\n       * pending property changes can later be flushed via a call to\n       * `_flushClients`.\n       *\n       * @param {Object} client PropertyEffects client to enqueue\n       * @protected\n       */\n      _enqueueClient(client) {\n        this.__dataPendingClients = this.__dataPendingClients || [];\n        if (client !== this) {\n          this.__dataPendingClients.push(client);\n        }\n      }\n\n      /**\n       * Flushes any clients previously enqueued via `_enqueueClient`, causing\n       * their `_flushProperties` method to run.\n       *\n       * @protected\n       */\n      _flushClients() {\n        if (!this.__dataClientsReady) {\n          this.__dataClientsReady = true;\n          this._readyClients();\n          // Override point where accessors are turned on; importantly,\n          // this is after clients have fully readied, providing a guarantee\n          // that any property effects occur only after all clients are ready.\n          this.__dataReady = true;\n        } else {\n          this.__enableOrFlushClients();\n        }\n      }\n\n      // NOTE: We ensure clients either enable or flush as appropriate. This\n      // handles two corner cases:\n      // (1) clients flush properly when connected/enabled before the host\n      // enables; e.g.\n      //   (a) Templatize stamps with no properties and does not flush and\n      //   (b) the instance is inserted into dom and\n      //   (c) then the instance flushes.\n      // (2) clients enable properly when not connected/enabled when the host\n      // flushes; e.g.\n      //   (a) a template is runtime stamped and not yet connected/enabled\n      //   (b) a host sets a property, causing stamped dom to flush\n      //   (c) the stamped dom enables.\n      __enableOrFlushClients() {\n        let clients = this.__dataPendingClients;\n        if (clients) {\n          this.__dataPendingClients = null;\n          for (let i=0; i < clients.length; i++) {\n            let client = clients[i];\n            if (!client.__dataEnabled) {\n              client._enableProperties();\n            } else if (client.__dataPending) {\n              client._flushProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Perform any initial setup on client dom. Called before the first\n       * `_flushProperties` call on client dom and before any element\n       * observers are called.\n       *\n       * @protected\n       */\n      _readyClients() {\n        this.__enableOrFlushClients();\n      }\n\n      /**\n       * Sets a bag of property changes to this instance, and\n       * synchronously processes all effects of the properties as a batch.\n       *\n       * Property names must be simple properties, not paths.  Batched\n       * path propagation is not supported.\n       *\n       * @param {Object} props Bag of one or more key-value pairs whose key is\n       *   a property and value is the new value to set for that property.\n       * @param {boolean=} setReadOnly When true, any private values set in\n       *   `props` will be set. By default, `setProperties` will not set\n       *   `readOnly: true` root properties.\n       * @public\n       */\n      setProperties(props, setReadOnly) {\n        for (let path in props) {\n          if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {\n            //TODO(kschaaf): explicitly disallow paths in setProperty?\n            // wildcard observers currently only pass the first changed path\n            // in the `info` object, and you could do some odd things batching\n            // paths, e.g. {'foo.bar': {...}, 'foo': null}\n            this._setPendingPropertyOrPath(path, props[path], true);\n          }\n        }\n        this._invalidateProperties();\n      }\n\n      /**\n       * Overrides `PropertyAccessors` so that property accessor\n       * side effects are not enabled until after client dom is fully ready.\n       * Also calls `_flushClients` callback to ensure client dom is enabled\n       * that was not enabled as a result of flushing properties.\n       *\n       * @override\n       */\n      ready() {\n        // It is important that `super.ready()` is not called here as it\n        // immediately turns on accessors. Instead, we wait until `readyClients`\n        // to enable accessors to provide a guarantee that clients are ready\n        // before processing any accessors side effects.\n        this._flushProperties();\n        // If no data was pending, `_flushProperties` will not `flushClients`\n        // so ensure this is done.\n        if (!this.__dataClientsReady) {\n          this._flushClients();\n        }\n        // Before ready, client notifications do not trigger _flushProperties.\n        // Therefore a flush is necessary here if data has been set.\n        if (this.__dataPending) {\n          this._flushProperties();\n        }\n      }\n\n      /**\n       * Implements `PropertyAccessors`'s properties changed callback.\n       *\n       * Runs each class of effects for the batch of changed properties in\n       * a specific order (compute, propagate, reflect, observe, notify).\n       *\n       * @override\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) {\n        // ----------------------------\n        // let c = Object.getOwnPropertyNames(changedProps || {});\n        // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);\n        // if (window.debug) { debugger; }\n        // ----------------------------\n        let hasPaths = this.__dataHasPaths;\n        this.__dataHasPaths = false;\n        // Compute properties\n        runComputedEffects(this, changedProps, oldProps, hasPaths);\n        // Clear notify properties prior to possible reentry (propagate, observe),\n        // but after computing effects have a chance to add to them\n        let notifyProps = this.__dataToNotify;\n        this.__dataToNotify = null;\n        // Propagate properties to clients\n        this._propagatePropertyChanges(changedProps, oldProps, hasPaths);\n        // Flush clients\n        this._flushClients();\n        // Reflect properties\n        runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);\n        // Observe properties\n        runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);\n        // Notify properties to host\n        if (notifyProps) {\n          runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);\n        }\n        // Clear temporary cache at end of turn\n        if (this.__dataCounter == 1) {\n          this.__dataTemp = {};\n        }\n        // ----------------------------\n        // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);\n        // ----------------------------\n      }\n\n      /**\n       * Called to propagate any property changes to stamped template nodes\n       * managed by this element.\n       *\n       * @param {Object} changedProps Bag of changed properties\n       * @param {Object} oldProps Bag of previous values for changed properties\n       * @param {boolean} hasPaths True with `props` contains one or more paths\n       * @protected\n       */\n      _propagatePropertyChanges(changedProps, oldProps, hasPaths) {\n        if (this[TYPES.PROPAGATE]) {\n          runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);\n        }\n        let templateInfo = this.__templateInfo;\n        while (templateInfo) {\n          runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,\n            hasPaths, templateInfo.nodeList);\n          templateInfo = templateInfo.nextTemplateInfo;\n        }\n      }\n\n      /**\n       * Aliases one data path as another, such that path notifications from one\n       * are routed to the other.\n       *\n       * @param {string | !Array<string|number>} to Target path to link.\n       * @param {string | !Array<string|number>} from Source path to link.\n       * @public\n       */\n      linkPaths(to, from) {\n        to = Polymer.Path.normalize(to);\n        from = Polymer.Path.normalize(from);\n        this.__dataLinkedPaths = this.__dataLinkedPaths || {};\n        this.__dataLinkedPaths[to] = from;\n      }\n\n      /**\n       * Removes a data path alias previously established with `_linkPaths`.\n       *\n       * Note, the path to unlink should be the target (`to`) used when\n       * linking the paths.\n       *\n       * @param {string | !Array<string|number>} path Target path to unlink.\n       * @public\n       */\n      unlinkPaths(path) {\n        path = Polymer.Path.normalize(path);\n        if (this.__dataLinkedPaths) {\n          delete this.__dataLinkedPaths[path];\n        }\n      }\n\n      /**\n       * Notify that an array has changed.\n       *\n       * Example:\n       *\n       *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n       *     ...\n       *     this.items.splice(1, 1, {name: 'Sam'});\n       *     this.items.push({name: 'Bob'});\n       *     this.notifySplices('items', [\n       *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n       *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n       *     ]);\n       *\n       * @param {string} path Path that should be notified.\n       * @param {Array} splices Array of splice records indicating ordered\n       *   changes that occurred to the array. Each record should have the\n       *   following fields:\n       *    * index: index at which the change occurred\n       *    * removed: array of items that were removed from this index\n       *    * addedCount: number of new items added at this index\n       *    * object: a reference to the array in question\n       *    * type: the string literal 'splice'\n       *\n       *   Note that splice records _must_ be normalized such that they are\n       *   reported in index order (raw results from `Object.observe` are not\n       *   ordered and must be normalized/merged before notifying).\n       * @public\n      */\n      notifySplices(path, splices) {\n        let info = {path: ''};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        notifySplices(this, array, info.path, splices);\n      }\n\n      /**\n       * Convenience method for reading a value from a path.\n       *\n       * Note, if any part in the path is undefined, this method returns\n       * `undefined` (this method does not throw when dereferencing undefined\n       * paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n       * @param {Object=} root Root object from which the path is evaluated.\n       * @return {*} Value at the path, or `undefined` if any part of the path\n       *   is undefined.\n       * @public\n       */\n      get(path, root) {\n        return Polymer.Path.get(root || this, path);\n      }\n\n      /**\n       * Convenience method for setting a value to a path and notifying any\n       * elements bound to the same path.\n       *\n       * Note, if any part in the path except for the last is undefined,\n       * this method does nothing (this method does not throw when\n       * dereferencing undefined paths).\n       *\n       * @param {(string|!Array<(string|number)>)} path Path to the value\n       *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).\n       * @param {*} value Value to set at the specified path.\n       * @param {Object=} root Root object from which the path is evaluated.\n       *   When specified, no notification will occur.\n       * @public\n      */\n      set(path, value, root) {\n        if (root) {\n          Polymer.Path.set(root, path, value);\n        } else {\n          if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {\n            if (this._setPendingPropertyOrPath(path, value, true)) {\n              this._invalidateProperties();\n            }\n          }\n        }\n      }\n\n      /**\n       * Adds items onto the end of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {...*} items Items to push onto array\n       * @return {number} New length of the array.\n       * @public\n       */\n      push(path, ...items) {\n        let info = {path: ''};\n        let array = /** @type {Array}*/(Polymer.Path.get(this, path, info));\n        let len = array.length;\n        let ret = array.push(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, len, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the end of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      pop(path) {\n        let info = {path: ''};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let hadLength = Boolean(array.length);\n        let ret = array.pop();\n        if (hadLength) {\n          notifySplice(this, array, info.path, array.length, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Starting from the start index specified, removes 0 or more items\n       * from the array and inserts 0 or more new items in their place.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.splice`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {number} start Index from which to start removing/inserting.\n       * @param {number} deleteCount Number of items to remove.\n       * @param {...*} items Items to insert into array.\n       * @return {Array} Array of removed items.\n       * @public\n       */\n      splice(path, start, deleteCount, ...items) {\n        let info = {path : ''};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        // Normalize fancy native splice handling of crazy start values\n        if (start < 0) {\n          start = array.length - Math.floor(-start);\n        } else {\n          start = Math.floor(start);\n        }\n        if (!start) {\n          start = 0;\n        }\n        let ret = array.splice(start, deleteCount, ...items);\n        if (items.length || ret.length) {\n          notifySplice(this, array, info.path, start, items.length, ret);\n        }\n        return ret;\n      }\n\n      /**\n       * Removes an item from the beginning of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @return {*} Item that was removed.\n       * @public\n       */\n      shift(path) {\n        let info = {path: ''};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let hadLength = Boolean(array.length);\n        let ret = array.shift();\n        if (hadLength) {\n          notifySplice(this, array, info.path, 0, 0, [ret]);\n        }\n        return ret;\n      }\n\n      /**\n       * Adds items onto the beginning of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @param {string} path Path to array.\n       * @param {...*} items Items to insert info array\n       * @return {number} New length of the array.\n       * @public\n       */\n      unshift(path, ...items) {\n        let info = {path: ''};\n        let array = /** @type {Array} */(Polymer.Path.get(this, path, info));\n        let ret = array.unshift(...items);\n        if (items.length) {\n          notifySplice(this, array, info.path, 0, items.length, []);\n        }\n        return ret;\n      }\n\n      /**\n       * Notify that a path has changed.\n       *\n       * Example:\n       *\n       *     this.item.user.name = 'Bob';\n       *     this.notifyPath('item.user.name');\n       *\n       * @param {string} path Path that should be notified.\n       * @param {*=} value Value at the path (optional).\n       * @public\n      */\n      notifyPath(path, value) {\n        /** @type {string} */\n        let propPath;\n        if (arguments.length == 1) {\n          // Get value if not supplied\n          let info = {path: ''};\n          value = Polymer.Path.get(this, path, info);\n          propPath = info.path;\n        } else if (Array.isArray(path)) {\n          // Normalize path if needed\n          propPath = Polymer.Path.normalize(path);\n        } else {\n          propPath = /** @type{string} */(path);\n        }\n        if (this._setPendingPropertyOrPath(propPath, value, true, true)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Equivalent to static `createReadOnlyProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      _createReadOnlyProperty(property, protectedSetter) {\n        this._addPropertyEffect(property, TYPES.READ_ONLY);\n        if (protectedSetter) {\n          this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {\n            this._setProperty(property, value);\n          }\n        }\n      }\n\n      /**\n       * Equivalent to static `createPropertyObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      _createPropertyObserver(property, methodName, dynamicFn) {\n        let info = { property, methodName, dynamicFn: Boolean(dynamicFn) };\n        this._addPropertyEffect(property, TYPES.OBSERVE, {\n          fn: runObserverEffect, info, trigger: {name: property}\n        });\n        if (dynamicFn) {\n          this._addPropertyEffect(methodName, TYPES.OBSERVE, {\n            fn: runObserverEffect, info, trigger: {name: methodName}\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createMethodObserver` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      _createMethodObserver(expression, dynamicFn) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed observer expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);\n      }\n\n      /**\n       * Equivalent to static `createNotifyingProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createNotifyingProperty(property) {\n        this._addPropertyEffect(property, TYPES.NOTIFY, {\n          fn: runNotifyEffect,\n          info: {\n            eventName: CaseMap.camelToDashCase(property) + '-changed',\n            property: property\n          }\n        });\n      }\n\n      /**\n       * Equivalent to static `createReflectedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      _createReflectedProperty(property) {\n        let attr = CaseMap.camelToDashCase(property);\n        if (attr[0] === '-') {\n          console.warn('Property ' + property + ' cannot be reflected to attribute ' +\n            attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property thisead.');\n        } else {\n          this._addPropertyEffect(property, TYPES.REFLECT, {\n            fn: runReflectEffect,\n            info: {\n              attrName: attr\n            }\n          });\n        }\n      }\n\n      /**\n       * Equivalent to static `createComputedProperty` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      _createComputedProperty(property, expression, dynamicFn) {\n        let sig = parseMethod(expression);\n        if (!sig) {\n          throw new Error(\"Malformed computed expression '\" + expression + \"'\");\n        }\n        createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);\n      }\n\n      // -- static class methods ------------\n\n      /**\n       * Ensures an accessor exists for the specified property, and adds\n       * to a list of \"property effects\" that will run when the accessor for\n       * the specified property is set.  Effects are grouped by \"type\", which\n       * roughly corresponds to a phase in effect processing.  The effect\n       * metadata should be in the following form:\n       *\n       *   {\n       *     fn: effectFunction, // Reference to function to call to perform effect\n       *     info: { ... }       // Effect metadata passed to function\n       *     trigger: {          // Optional triggering metadata; if not provided\n       *       name: string      // the property is treated as a wildcard\n       *       structured: boolean\n       *       wildcard: boolean\n       *     }\n       *   }\n       *\n       * Effects are called from `_propertiesChanged` in the following order by\n       * type:\n       *\n       * 1. COMPUTE\n       * 2. PROPAGATE\n       * 3. REFLECT\n       * 4. OBSERVE\n       * 5. NOTIFY\n       *\n       * Effect functions are called with the following signature:\n       *\n       *   effectFunction(inst, path, props, oldProps, info, hasPaths)\n       *\n       * @param {string} property Property that should trigger the effect\n       * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      static addPropertyEffect(property, type, effect) {\n        this.prototype._addPropertyEffect(property, type, effect);\n      }\n\n      /**\n       * Creates a single-property observer for the given property.\n       *\n       * @param {string} property Property name\n       * @param {string} methodName Name of observer method to call\n       * @param {boolean=} dynamicFn Whether the method name should be included as\n       *   a dependency to the effect.\n       * @protected\n       */\n      static createPropertyObserver(property, methodName, dynamicFn) {\n        this.prototype._createPropertyObserver(property, methodName, dynamicFn);\n      }\n\n      /**\n       * Creates a multi-property \"method observer\" based on the provided\n       * expression, which should be a string in the form of a normal Javascript\n       * function signature: `'methodName(arg1, [..., argn])'`.  Each argument\n       * should correspond to a property or path in the context of this\n       * prototype (or instance), or may be a literal string or number.\n       *\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating\n       *   whether method names should be included as a dependency to the effect.\n       * @protected\n       */\n      static createMethodObserver(expression, dynamicFn) {\n        this.prototype._createMethodObserver(expression, dynamicFn);\n      }\n\n      /**\n       * Causes the setter for the given property to dispatch `<property>-changed`\n       * events to notify of changes to the property.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      static createNotifyingProperty(property) {\n        this.prototype._createNotifyingProperty(property);\n      }\n\n      /**\n       * Creates a read-only accessor for the given property.\n       *\n       * To set the property, use the protected `_setProperty` API.\n       * To create a custom protected setter (e.g. `_setMyProp()` for\n       * property `myProp`), pass `true` for `protectedSetter`.\n       *\n       * Note, if the property will have other property effects, this method\n       * should be called first, before adding other effects.\n       *\n       * @param {string} property Property name\n       * @param {boolean=} protectedSetter Creates a custom protected setter\n       *   when `true`.\n       * @protected\n       */\n      static createReadOnlyProperty(property, protectedSetter) {\n        this.prototype._createReadOnlyProperty(property, protectedSetter);\n      }\n\n      /**\n       * Causes the setter for the given property to reflect the property value\n       * to a (dash-cased) attribute of the same name.\n       *\n       * @param {string} property Property name\n       * @protected\n       */\n      static createReflectedProperty(property) {\n        this.prototype._createReflectedProperty(property);\n      }\n\n      /**\n       * Creates a computed property whose value is set to the result of the\n       * method described by the given `expression` each time one or more\n       * arguments to the method changes.  The expression should be a string\n       * in the form of a normal Javascript function signature:\n       * `'methodName(arg1, [..., argn])'`\n       *\n       * @param {string} property Name of computed property to set\n       * @param {string} expression Method expression\n       * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether\n       *   method names should be included as a dependency to the effect.\n       * @protected\n       */\n      static createComputedProperty(property, expression, dynamicFn) {\n        this.prototype._createComputedProperty(property, expression, dynamicFn);\n      }\n\n      /**\n       * Parses the provided template to ensure binding effects are created\n       * for them, and then ensures property accessors are created for any\n       * dependent properties in the template.  Binding effects for bound\n       * templates are stored in a linked list on the instance so that\n       * templates can be efficiently stamped and unstamped.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @return {Object} Template metadata object\n       * @protected\n       */\n      static bindTemplate(template) {\n        return this.prototype._bindTemplate(template);\n      }\n\n      // -- binding ----------------------------------------------\n\n      /**\n       * Equivalent to static `bindTemplate` API but can be called on\n       * an instance to add effects at runtime.  See that method for\n       * full API docs.\n       *\n       * This method may be called on the prototype (for prototypical template\n       * binding, to avoid creating accessors every instance) once per prototype,\n       * and will be called with `runtimeBinding: true` by `_stampTemplate` to\n       * create and link an instance of the template metadata associated with a\n       * particular stamping.\n       *\n       * @param {HTMLTemplateElement} template Template containing binding\n       *   bindings\n       * @param {boolean=} instanceBinding When false (default), performs\n       *   \"prototypical\" binding of the template and overwrites any previously\n       *   bound template for the class. When true (as passed from\n       *   `_stampTemplate`), the template info is instanced and linked into\n       *   the list of bound templates.\n       * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,\n       *   this is an instance of the prototypical template info\n       * @protected\n       */\n      _bindTemplate(template, instanceBinding) {\n        let templateInfo = this.constructor._parseTemplate(template);\n        let wasPreBound = this.__templateInfo == templateInfo;\n        // Optimization: since this is called twice for proto-bound templates,\n        // don't attempt to recreate accessors if this template was pre-bound\n        if (!wasPreBound) {\n          for (let prop in templateInfo.propertyEffects) {\n            this._createPropertyAccessor(prop);\n          }\n        }\n        if (instanceBinding) {\n          // For instance-time binding, create instance of template metadata\n          // and link into list of templates if necessary\n          templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));\n          templateInfo.wasPreBound = wasPreBound;\n          if (!wasPreBound && this.__templateInfo) {\n            let last = this.__templateInfoLast || this.__templateInfo;\n            this.__templateInfoLast = last.nextTemplateInfo = templateInfo;\n            templateInfo.previousTemplateInfo = last;\n            return templateInfo;\n          }\n        }\n        return this.__templateInfo = templateInfo;\n      }\n\n      /**\n       * Adds a property effect to the given template metadata, which is run\n       * at the \"propagate\" stage of `_propertiesChanged` when the template\n       * has been bound to the element via `_bindTemplate`.\n       *\n       * The `effect` object should match the format in `_addPropertyEffect`.\n       *\n       * @param {Object} templateInfo Template metadata to add effect to\n       * @param {string} prop Property that should trigger the effect\n       * @param {Object=} effect Effect metadata object\n       * @protected\n       */\n      static _addTemplatePropertyEffect(templateInfo, prop, effect) {\n        let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};\n        hostProps[prop] = true;\n        let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};\n        let propEffects = effects[prop] = effects[prop] || [];\n        propEffects.push(effect);\n      }\n\n      /**\n       * Stamps the provided template and performs instance-time setup for\n       * Polymer template features, including data bindings, declarative event\n       * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment\n       * is returned containing the stamped DOM, ready for insertion into the\n       * DOM.\n       *\n       * This method may be called more than once; however note that due to\n       * `shadycss` polyfill limitations, only styles from templates prepared\n       * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\n       * to the shadow root and support CSS custom properties), and note that\n       * `ShadyCSS.prepareTemplate` may only be called once per element. As such,\n       * any styles required by in runtime-stamped templates must be included\n       * in the main element template.\n       *\n       * @param {!HTMLTemplateElement} template Template to stamp\n       * @return {!StampedTemplate} Cloned template content\n       * @override\n       * @protected\n       */\n      _stampTemplate(template) {\n        // Ensures that created dom is `_enqueueClient`'d to this element so\n        // that it can be flushed on next call to `_flushProperties`\n        hostStack.beginHosting(this);\n        let dom = super._stampTemplate(template);\n        hostStack.endHosting(this);\n        let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));\n        // Add template-instance-specific data to instanced templateInfo\n        templateInfo.nodeList = dom.nodeList;\n        // Capture child nodes to allow unstamping of non-prototypical templates\n        if (!templateInfo.wasPreBound) {\n          let nodes = templateInfo.childNodes = [];\n          for (let n=dom.firstChild; n; n=n.nextSibling) {\n            nodes.push(n);\n          }\n        }\n        dom.templateInfo = templateInfo;\n        // Setup compound storage, 2-way listeners, and dataHost for bindings\n        setupBindings(this, templateInfo);\n        // Flush properties into template nodes if already booted\n        if (this.__dataReady) {\n          runEffects(this, templateInfo.propertyEffects, this.__data, null,\n            false, templateInfo.nodeList);\n        }\n        return dom;\n      }\n\n      /**\n       * Removes and unbinds the nodes previously contained in the provided\n       * DocumentFragment returned from `_stampTemplate`.\n       *\n       * @param {!StampedTemplate} dom DocumentFragment previously returned\n       *   from `_stampTemplate` associated with the nodes to be removed\n       * @protected\n       */\n      _removeBoundDom(dom) {\n        // Unlink template info\n        let templateInfo = dom.templateInfo;\n        if (templateInfo.previousTemplateInfo) {\n          templateInfo.previousTemplateInfo.nextTemplateInfo =\n            templateInfo.nextTemplateInfo;\n        }\n        if (templateInfo.nextTemplateInfo) {\n          templateInfo.nextTemplateInfo.previousTemplateInfo =\n            templateInfo.previousTemplateInfo;\n        }\n        if (this.__templateInfoLast == templateInfo) {\n          this.__templateInfoLast = templateInfo.previousTemplateInfo;\n        }\n        templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;\n        // Remove stamped nodes\n        let nodes = templateInfo.childNodes;\n        for (let i=0; i<nodes.length; i++) {\n          let node = nodes[i];\n          node.parentNode.removeChild(node);\n        }\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`\n       * array is added to `nodeInfo` and populated with binding metadata\n       * with information capturing the binding target, and a `parts` array\n       * with one or more metadata objects capturing the source(s) of the\n       * binding.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {TemplateInfo} templateInfo Template metadata for current template\n       * @param {NodeInfo} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n       */\n      static _parseTemplateNode(node, templateInfo, nodeInfo) {\n        let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);\n        if (node.nodeType === Node.TEXT_NODE) {\n          let parts = this._parseBindings(node.textContent, templateInfo);\n          if (parts) {\n            // Initialize the textContent with any literal parts\n            // NOTE: default to a space here so the textNode remains; some browsers\n            // (IE) evacipate an empty textNode following cloneNode/importNode.\n            node.textContent = literalFromParts(parts) || ' ';\n            addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);\n            noted = true;\n          }\n        }\n        return noted;\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * parsing bindings from attributes.  A `bindings`\n       * array is added to `nodeInfo` and populated with binding metadata\n       * with information capturing the binding target, and a `parts` array\n       * with one or more metadata objects capturing the source(s) of the\n       * binding.\n       *\n       * @override\n       * @param {Element} node Node to parse\n       * @param {TemplateInfo} templateInfo Template metadata for current template\n       * @param {NodeInfo} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n       */\n      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n        let parts = this._parseBindings(value, templateInfo);\n        if (parts) {\n          // Attribute or property\n          let origName = name;\n          let kind = 'property';\n          if (name[name.length-1] == '$') {\n            name = name.slice(0, -1);\n            kind = 'attribute';\n          }\n          // Initialize attribute bindings with any literal parts\n          let literal = literalFromParts(parts);\n          if (literal && kind == 'attribute') {\n            node.setAttribute(name, literal);\n          }\n          // Clear attribute before removing, since IE won't allow removing\n          // `value` attribute if it previously had a value (can't\n          // unconditionally set '' before removing since attributes with `$`\n          // can't be set using setAttribute)\n          if (node.localName === 'input' && origName === 'value') {\n            node.setAttribute(origName, '');\n          }\n          // Remove annotation\n          node.removeAttribute(origName);\n          // Case hackery: attributes are lower-case, but bind targets\n          // (properties) are case sensitive. Gambit is to map dash-case to\n          // camel-case: `foo-bar` becomes `fooBar`.\n          // Attribute bindings are excepted.\n          if (kind === 'property') {\n            name = Polymer.CaseMap.dashToCamelCase(name);\n          }\n          addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);\n          return true;\n        } else {\n          return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);\n        }\n      }\n\n      /**\n       * Overrides default `TemplateStamp` implementation to add support for\n       * binding the properties that a nested template depends on to the template\n       * as `_host_<property>`.\n       *\n       * @override\n       * @param {Node} node Node to parse\n       * @param {TemplateInfo} templateInfo Template metadata for current template\n       * @param {NodeInfo} nodeInfo Node metadata for current template node\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       * @protected\n       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n       */\n      static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {\n        let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);\n        // Merge host props into outer template and add bindings\n        let hostProps = nodeInfo.templateInfo.hostProps;\n        let mode = '{';\n        for (let source in hostProps) {\n          let parts = [{ mode, source, dependencies: [source] }];\n          addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);\n        }\n        return noted;\n      }\n\n      /**\n       * Called to parse text in a template (either attribute values or\n       * textContent) into binding metadata.\n       *\n       * Any overrides of this method should return an array of binding part\n       * metadata  representing one or more bindings found in the provided text\n       * and any \"literal\" text in between.  Any non-literal parts will be passed\n       * to `_evaluateBinding` when any dependencies change.  The only required\n       * fields of each \"part\" in the returned array are as follows:\n       *\n       * - `dependencies` - Array containing trigger metadata for each property\n       *   that should trigger the binding to update\n       * - `literal` - String containing text if the part represents a literal;\n       *   in this case no `dependencies` are needed\n       *\n       * Additional metadata for use by `_evaluateBinding` may be provided in\n       * each part object as needed.\n       *\n       * The default implementation handles the following types of bindings\n       * (one or more may be intermixed with literal strings):\n       * - Property binding: `[[prop]]`\n       * - Path binding: `[[object.prop]]`\n       * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n       * - Two-way property or path bindings (supports negation):\n       *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n       * - Inline computed method (supports negation):\n       *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n       *\n       * @param {string} text Text to parse from attribute or textContent\n       * @param {Object} templateInfo Current template metadata\n       * @return {Array<!BindingPart>} Array of binding part metadata\n       * @protected\n       */\n      static _parseBindings(text, templateInfo) {\n        let parts = [];\n        let lastIndex = 0;\n        let m;\n        // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n        // Regex matches:\n        //        Iteration 1:  Iteration 2:\n        // m[1]: '{{'          '[['\n        // m[2]: ''            '!'\n        // m[3]: 'prop'        'compute(foo,bar)'\n        while ((m = bindingRegex.exec(text)) !== null) {\n          // Add literal part\n          if (m.index > lastIndex) {\n            parts.push({literal: text.slice(lastIndex, m.index)});\n          }\n          // Add binding part\n          let mode = m[1][0];\n          let negate = Boolean(m[2]);\n          let source = m[3].trim();\n          let customEvent = false, notifyEvent = '', colon = -1;\n          if (mode == '{' && (colon = source.indexOf('::')) > 0) {\n            notifyEvent = source.substring(colon + 2);\n            source = source.substring(0, colon);\n            customEvent = true;\n          }\n          let signature = parseMethod(source);\n          let dependencies = [];\n          if (signature) {\n            // Inline computed function\n            let {args, methodName} = signature;\n            for (let i=0; i<args.length; i++) {\n              let arg = args[i];\n              if (!arg.literal) {\n                dependencies.push(arg);\n              }\n            }\n            let dynamicFns = templateInfo.dynamicFns;\n            if (dynamicFns && dynamicFns[methodName] || signature.static) {\n              dependencies.push(methodName);\n              signature.dynamicFn = true;\n            }\n          } else {\n            // Property or path\n            dependencies.push(source);\n          }\n          parts.push({\n            source, mode, negate, customEvent, signature, dependencies,\n            event: notifyEvent\n          });\n          lastIndex = bindingRegex.lastIndex;\n        }\n        // Add a final literal part\n        if (lastIndex && lastIndex < text.length) {\n          let literal = text.substring(lastIndex);\n          if (literal) {\n            parts.push({\n              literal: literal\n            });\n          }\n        }\n        if (parts.length) {\n          return parts;\n        } else {\n          return null;\n        }\n      }\n\n      /**\n       * Called to evaluate a previously parsed binding part based on a set of\n       * one or more changed dependencies.\n       *\n       * @param {this} inst Element that should be used as scope for\n       *   binding dependencies\n       * @param {BindingPart} part Binding part metadata\n       * @param {string} path Property/path that triggered this effect\n       * @param {Object} props Bag of current property changes\n       * @param {Object} oldProps Bag of previous values for changed properties\n       * @param {boolean} hasPaths True with `props` contains one or more paths\n       * @return {*} Value the binding part evaluated to\n       * @protected\n       */\n      static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {\n        let value;\n        if (part.signature) {\n          value = runMethodEffect(inst, path, props, oldProps, part.signature);\n        } else if (path != part.source) {\n          value = Polymer.Path.get(inst, part.source);\n        } else {\n          if (hasPaths && Polymer.Path.isPath(path)) {\n            value = Polymer.Path.get(inst, path);\n          } else {\n            value = inst.__data[path];\n          }\n        }\n        if (part.negate) {\n          value = !value;\n        }\n        return value;\n      }\n\n    }\n\n    // make a typing for closure :P\n    PropertyEffectsType = PropertyEffects;\n\n    return PropertyEffects;\n  });\n\n  /**\n   * Helper api for enqueing client dom created by a host element.\n   *\n   * By default elements are flushed via `_flushProperties` when\n   * `connectedCallback` is called. Elements attach their client dom to\n   * themselves at `ready` time which results from this first flush.\n   * This provides an ordering guarantee that the client dom an element\n   * creates is flushed before the element itself (i.e. client `ready`\n   * fires before host `ready`).\n   *\n   * However, if `_flushProperties` is called *before* an element is connected,\n   * as for example `Templatize` does, this ordering guarantee cannot be\n   * satisfied because no elements are connected. (Note: Bound elements that\n   * receive data do become enqueued clients and are properly ordered but\n   * unbound elements are not.)\n   *\n   * To maintain the desired \"client before host\" ordering guarantee for this\n   * case we rely on the \"host stack. Client nodes registers themselves with\n   * the creating host element when created. This ensures that all client dom\n   * is readied in the proper order, maintaining the desired guarantee.\n   *\n   * @private\n   */\n  let hostStack = {\n\n    stack: [],\n\n    /**\n     * @param {*} inst Instance to add to hostStack\n     * @this {hostStack}\n     */\n    registerHost(inst) {\n      if (this.stack.length) {\n        let host = this.stack[this.stack.length-1];\n        host._enqueueClient(inst);\n      }\n    },\n\n    /**\n     * @param {*} inst Instance to begin hosting\n     * @this {hostStack}\n     */\n    beginHosting(inst) {\n      this.stack.push(inst);\n    },\n\n    /**\n     * @param {*} inst Instance to end hosting\n     * @this {hostStack}\n     */\n    endHosting(inst) {\n      let stackLen = this.stack.length;\n      if (stackLen && this.stack[stackLen-1] == inst) {\n        this.stack.pop();\n      }\n    }\n\n  }\n\n})();\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/mixins/property-effects.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n\n<link rel=\"import\" href=\"../utils/boot.html\">\n<link rel=\"import\" href=\"../utils/settings.html\">\n<link rel=\"import\" href=\"../utils/mixin.html\">\n<link rel=\"import\" href=\"../utils/case-map.html\">\n<link rel=\"import\" href=\"../utils/style-gather.html\">\n<link rel=\"import\" href=\"../utils/resolve-url.html\">\n<link rel=\"import\" href=\"../elements/dom-module.html\">\n<link rel=\"import\" href=\"property-effects.html\">\n\n<script>\n(function() {\n  'use strict';\n\n  /**\n   * Element class mixin that provides the core API for Polymer's meta-programming\n   * features including template stamping, data-binding, attribute deserialization,\n   * and property change observation.\n   *\n   * Subclassers may provide the following static getters to return metadata\n   * used to configure Polymer's features for the class:\n   *\n   * - `static get is()`: When the template is provided via a `dom-module`,\n   *   users should return the `dom-module` id from a static `is` getter.  If\n   *   no template is needed or the template is provided directly via the\n   *   `template` getter, there is no need to define `is` for the element.\n   *\n   * - `static get template()`: Users may provide the template directly (as\n   *   opposed to via `dom-module`) by implementing a static `template` getter.\n   *   The getter may return an `HTMLTemplateElement` or a string, which will\n   *   automatically be parsed into a template.\n   *\n   * - `static get properties()`: Should return an object describing\n   *   property-related metadata used by Polymer features (key: property name\n   *   value: object containing property metadata). Valid keys in per-property\n   *   metadata include:\n   *   - `type` (String|Number|Object|Array|...): Used by\n   *     `attributeChangedCallback` to determine how string-based attributes\n   *     are deserialized to JavaScript property values.\n   *   - `notify` (boolean): Causes a change in the property to fire a\n   *     non-bubbling event called `<property>-changed`. Elements that have\n   *     enabled two-way binding to the property use this event to observe changes.\n   *   - `readOnly` (boolean): Creates a getter for the property, but no setter.\n   *     To set a read-only property, use the private setter method\n   *     `_setProperty(property, value)`.\n   *   - `observer` (string): Observer method name that will be called when\n   *     the property changes. The arguments of the method are\n   *     `(value, previousValue)`.\n   *   - `computed` (string): String describing method and dependent properties\n   *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).\n   *     Computed properties are read-only by default and can only be changed\n   *     via the return value of the computing method.\n   *\n   * - `static get observers()`: Array of strings describing multi-property\n   *   observer methods and their dependent properties (e.g.\n   *   `'observeABC(a, b, c)'`).\n   *\n   * The base class provides default implementations for the following standard\n   * custom element lifecycle callbacks; users may override these, but should\n   * call the super method to ensure\n   * - `constructor`: Run when the element is created or upgraded\n   * - `connectedCallback`: Run each time the element is connected to the\n   *   document\n   * - `disconnectedCallback`: Run each time the element is disconnected from\n   *   the document\n   * - `attributeChangedCallback`: Run each time an attribute in\n   *   `observedAttributes` is set or removed (note: this element's default\n   *   `observedAttributes` implementation will automatically return an array\n   *   of dash-cased attributes based on `properties`)\n   *\n   * @mixinFunction\n   * @polymer\n   * @appliesMixin Polymer.PropertyEffects\n   * @memberof Polymer\n   * @property rootPath {string} Set to the value of `Polymer.rootPath`,\n   *   which defaults to the main document path\n   * @property importPath {string} Set to the value of the class's static\n   *   `importPath` property, which defaults to the path of this element's\n   *   `dom-module` (when `is` is used), but can be overridden for other\n   *   import strategies.\n   * @summary Element class mixin that provides the core API for Polymer's\n   * meta-programming features.\n   */\n  Polymer.ElementMixin = Polymer.dedupingMixin(base => {\n\n    /**\n     * @constructor\n     * @extends {base}\n     * @implements {Polymer_PropertyEffects}\n     */\n    const polymerElementBase = Polymer.PropertyEffects(base);\n\n    let caseMap = Polymer.CaseMap;\n\n    /**\n     * Returns the `properties` object specifically on `klass`. Use for:\n     * (1) super chain mixes togther to make `propertiesForClass` which is\n     * then used to make `observedAttributes`.\n     * (2) properties effects and observers are created from it at `finalize` time.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {Object} Object containing own properties for this class\n     * @private\n     */\n    function ownPropertiesForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__ownProperties', klass))) {\n        klass.__ownProperties =\n          klass.hasOwnProperty(JSCompiler_renameProperty('properties', klass)) ?\n          /** @type PolymerElementConstructor */ (klass).properties : {};\n      }\n      return klass.__ownProperties;\n    }\n\n    /**\n     * Returns the `observers` array specifically on `klass`. Use for\n     * setting up observers.\n     *\n     * @param {HTMLElement} klass Element class\n     * @return {Array} Array containing own observers for this class\n     * @private\n     */\n    function ownObserversForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__ownObservers', klass))) {\n        klass.__ownObservers =\n          klass.hasOwnProperty(JSCompiler_renameProperty('observers', klass)) ?\n          /** @type PolymerElementConstructor */ (klass).observers : [];\n      }\n      return klass.__ownObservers;\n    }\n\n    /**\n     * Mixes `props` into `flattenedProps` but upgrades shorthand type\n     * syntax to { type: Type}.\n     *\n     * @param {Object} flattenedProps Bag to collect flattened properties into\n     * @param {Object} props Bag of properties to add to `flattenedProps`\n     * @return {Object} The input `flattenedProps` bag\n     * @private\n     */\n    function flattenProperties(flattenedProps, props) {\n      for (let p in props) {\n        let o = props[p];\n        if (typeof o == 'function') {\n          o = { type: o };\n        }\n        flattenedProps[p] = o;\n      }\n      return flattenedProps;\n    }\n\n    /**\n     * Returns a flattened list of properties mixed together from the chain of all\n     * constructor's `config.properties`. This list is used to create\n     * (1) observedAttributes,\n     * (2) class property default values\n     *\n     * @param {PolymerElementConstructor} klass Element class\n     * @return {PolymerElementProperties} Flattened properties for this class\n     * @suppress {missingProperties} class.prototype is not a property for some reason?\n     * @private\n     */\n    function propertiesForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__classProperties', klass))) {\n        klass.__classProperties =\n        flattenProperties({}, ownPropertiesForClass(klass));\n        let superCtor = Object.getPrototypeOf(klass.prototype).constructor;\n        if (superCtor.prototype instanceof PolymerElement) {\n          klass.__classProperties = Object.assign(\n            Object.create(propertiesForClass(/** @type PolymerElementConstructor */(superCtor))),\n            klass.__classProperties);\n        }\n      }\n      return klass.__classProperties;\n    }\n\n    /**\n     * Returns a list of properties with default values.\n     * This list is created as an optimization since it is a subset of\n     * the list returned from `propertiesForClass`.\n     * This list is used in `_initializeProperties` to set property defaults.\n     *\n     * @param {PolymerElementConstructor} klass Element class\n     * @return {PolymerElementProperties} Flattened properties for this class\n     *   that have default values\n     * @private\n     */\n    function propertyDefaultsForClass(klass) {\n      if (!klass.hasOwnProperty(\n        JSCompiler_renameProperty('__classPropertyDefaults', klass))) {\n        klass.__classPropertyDefaults = null;\n        let props = propertiesForClass(klass);\n        for (let p in props) {\n          let info = props[p];\n          if ('value' in info) {\n            klass.__classPropertyDefaults = klass.__classPropertyDefaults || {};\n            klass.__classPropertyDefaults[p] = info;\n          }\n        }\n      }\n      return klass.__classPropertyDefaults;\n    }\n\n    /**\n     * Returns true if a `klass` has finalized. Called in `ElementClass.finalize()`\n     * @param {PolymerElementConstructor} klass Element class\n     * @return {boolean} True if all metaprogramming for this class has been\n     *   completed\n     * @private\n     */\n    function hasClassFinalized(klass) {\n      return klass.hasOwnProperty(JSCompiler_renameProperty('__finalized', klass));\n    }\n\n    /**\n     * Called by `ElementClass.finalize()`. Ensures this `klass` and\n     * *all superclasses* are finalized by traversing the prototype chain\n     * and calling `klass.finalize()`.\n     *\n     * @param {PolymerElementConstructor} klass Element class\n     * @private\n     */\n    function finalizeClassAndSuper(klass) {\n      let proto = /** @type PolymerElementConstructor */ (klass).prototype;\n      let superCtor = Object.getPrototypeOf(proto).constructor;\n      if (superCtor.prototype instanceof PolymerElement) {\n        superCtor.finalize();\n      }\n      finalizeClass(klass);\n    }\n\n    /**\n     * Configures a `klass` based on a staic `klass.config` object and\n     * a `template`. This includes creating accessors and effects\n     * for properties in `config` and the `template` as well as preparing the\n     * `template` for stamping.\n     *\n     * @param {PolymerElementConstructor} klass Element class\n     * @private\n     */\n    function finalizeClass(klass) {\n      klass.__finalized = true;\n      let proto = /** @type PolymerElementConstructor */ (klass).prototype;\n      if (klass.hasOwnProperty(\n        JSCompiler_renameProperty('is', klass)) && klass.is) {\n        Polymer.telemetry.register(proto);\n      }\n      let props = ownPropertiesForClass(klass);\n      if (props) {\n        finalizeProperties(proto, props);\n      }\n      let observers = ownObserversForClass(klass);\n      if (observers) {\n        finalizeObservers(proto, observers, props);\n      }\n      // note: create \"working\" template that is finalized at instance time\n      let template = /** @type PolymerElementConstructor */ (klass).template;\n      if (template) {\n        if (typeof template === 'string') {\n          let t = document.createElement('template');\n          t.innerHTML = template;\n          template = t;\n        } else {\n          template = template.cloneNode(true);\n        }\n        proto._template = template;\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `properties` object.\n     * Leverages `PropertyEffects` to create property accessors and effects\n     * supporting, observers, reflecting to attributes, change notification,\n     * computed properties, and read only properties.\n     * @param {PolymerElement} proto Element class prototype to add accessors\n     *    and effects to\n     * @param {Object} properties Flattened bag of property descriptors for\n     *    this class\n     * @private\n     */\n    function finalizeProperties(proto, properties) {\n      for (let p in properties) {\n        createPropertyFromConfig(proto, p, properties[p], properties);\n      }\n    }\n\n    /**\n     * Configures a `proto` based on a `observers` array.\n     * Leverages `PropertyEffects` to create observers.\n     * @param {PolymerElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {Object} observers Flattened array of observer descriptors for\n     *   this class\n     * @param {Object} dynamicFns Object containing keys for any properties\n     *   that are functions and should trigger the effect when the function\n     *   reference is changed\n     * @private\n     */\n    function finalizeObservers(proto, observers, dynamicFns) {\n      for (let i=0; i < observers.length; i++) {\n        proto._createMethodObserver(observers[i], dynamicFns);\n      }\n    }\n\n    /**\n     * Creates effects for a property.\n     *\n     * Note, once a property has been set to\n     * `readOnly`, `computed`, `reflectToAttribute`, or `notify`\n     * these values may not be changed. For example, a subclass cannot\n     * alter these settings. However, additional `observers` may be added\n     * by subclasses.\n     *\n     * The info object should may contain property metadata as follows:\n     *\n     * * `type`: {function} type to which an attribute matching the property\n     * is deserialized. Note the property is camel-cased from a dash-cased\n     * attribute. For example, 'foo-bar' attribute is dersialized to a\n     * property named 'fooBar'.\n     *\n     * * `readOnly`: {boolean} creates a readOnly property and\n     * makes a private setter for the private of the form '_setFoo' for a\n     * property 'foo',\n     *\n     * * `computed`: {string} creates a computed property. A computed property\n     * also automatically is set to `readOnly: true`. The value is calculated\n     * by running a method and arguments parsed from the given string. For\n     * example 'compute(foo)' will compute a given property when the\n     * 'foo' property changes by executing the 'compute' method. This method\n     * must return the computed value.\n     *\n     * * `reflectToAttriute`: {boolean} If true, the property value is reflected\n     * to an attribute of the same name. Note, the attribute is dash-cased\n     * so a property named 'fooBar' is reflected as 'foo-bar'.\n     *\n     * * `notify`: {boolean} sends a non-bubbling notification event when\n     * the property changes. For example, a property named 'foo' sends an\n     * event named 'foo-changed' with `event.detail` set to the value of\n     * the property.\n     *\n     * * observer: {string} name of a method that runs when the property\n     * changes. The arguments of the method are (value, previousValue).\n     *\n     * Note: Users may want control over modifying property\n     * effects via subclassing. For example, a user might want to make a\n     * reflectToAttribute property not do so in a subclass. We've chosen to\n     * disable this because it leads to additional complication.\n     * For example, a readOnly effect generates a special setter. If a subclass\n     * disables the effect, the setter would fail unexpectedly.\n     * Based on feedback, we may want to try to make effects more malleable\n     * and/or provide an advanced api for manipulating them.\n     * Also consider adding warnings when an effect cannot be changed.\n     *\n     * @param {PolymerElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {string} name Name of the property.\n     * @param {Object} info Info object from which to create property effects.\n     * Supported keys:\n     * @param {Object} allProps Flattened map of all properties defined in this\n     *   element (including inherited properties)\n     * @private\n     */\n    function createPropertyFromConfig(proto, name, info, allProps) {\n      // computed forces readOnly...\n      if (info.computed) {\n        info.readOnly = true;\n      }\n      // Note, since all computed properties are readOnly, this prevents\n      // adding additional computed property effects (which leads to a confusing\n      // setup where multiple triggers for setting a property)\n      // While we do have `hasComputedEffect` this is set on the property's\n      // dependencies rather than itself.\n      if (info.computed  && !proto._hasReadOnlyEffect(name)) {\n        proto._createComputedProperty(name, info.computed, allProps);\n      }\n      if (info.readOnly && !proto._hasReadOnlyEffect(name)) {\n        proto._createReadOnlyProperty(name, !info.computed);\n      }\n      if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {\n        proto._createReflectedProperty(name);\n      }\n      if (info.notify && !proto._hasNotifyEffect(name)) {\n        proto._createNotifyingProperty(name);\n      }\n      // always add observer\n      if (info.observer) {\n        proto._createPropertyObserver(name, info.observer, allProps[info.observer]);\n      }\n    }\n\n    /**\n     * Configures an element `proto` to function with a given `template`.\n     * The element name `is` and extends `ext` must be specified for ShadyCSS\n     * style scoping.\n     *\n     * @param {PolymerElement} proto Element class prototype to add accessors\n     *   and effects to\n     * @param {!HTMLTemplateElement} template Template to process and bind\n     * @param {string} baseURI URL against which to resolve urls in\n     *   style element cssText\n     * @param {string} is Tag name (or type extension name) for this element\n     * @param {string=} ext For type extensions, the tag name that was extended\n     * @private\n     */\n    function finalizeTemplate(proto, template, baseURI, is, ext) {\n      // support `include=\"module-name\"`\n      let cssText =\n        Polymer.StyleGather.cssFromTemplate(template, baseURI) +\n        Polymer.StyleGather.cssFromModuleImports(is);\n      if (cssText) {\n        let style = document.createElement('style');\n        style.textContent = cssText;\n        template.content.insertBefore(style, template.content.firstChild);\n      }\n      if (window.ShadyCSS) {\n        window.ShadyCSS.prepareTemplate(template, is, ext);\n      }\n      proto._bindTemplate(template);\n    }\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @unrestricted\n     * @implements {Polymer_ElementMixin}\n     */\n    class PolymerElement extends polymerElementBase {\n\n      /**\n       * Standard Custom Elements V1 API.  The default implementation returns\n       * a list of dash-cased attributes based on a flattening of all properties\n       * declared in `static get properties()` for this element and any\n       * superclasses.\n       *\n       * @return {Array} Observed attribute list\n       */\n      static get observedAttributes() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('__observedAttributes', this))) {\n          let list = [];\n          let properties = propertiesForClass(this);\n          for (let prop in properties) {\n            list.push(Polymer.CaseMap.camelToDashCase(prop));\n          }\n          this.__observedAttributes = list;\n        }\n        return this.__observedAttributes;\n      }\n\n      /**\n       * Called automatically when the first element instance is created to\n       * ensure that class finalization work has been completed.\n       * May be called by users to eagerly perform class finalization work\n       * prior to the creation of the first element instance.\n       *\n       * Class finalization work generally includes meta-programming such as\n       * creating property accessors and any property effect metadata needed for\n       * the features used.\n       *\n       * @public\n       */\n      static finalize() {\n        if (!hasClassFinalized(this)) {\n          finalizeClassAndSuper(this);\n        }\n      }\n\n      /**\n       * Returns the template that will be stamped into this element's shadow root.\n       *\n       * If a `static get is()` getter is defined, the default implementation\n       * will return the first `<template>` in a `dom-module` whose `id`\n       * matches this element's `is`.\n       *\n       * Users may override this getter to return an arbitrary template\n       * (in which case the `is` getter is unnecessary). The template returned\n       * may be either an `HTMLTemplateElement` or a string that will be\n       * automatically parsed into a template.\n       *\n       * Note that when subclassing, if the super class overrode the default\n       * implementation and the subclass would like to provide an alternate\n       * template via a `dom-module`, it should override this getter and\n       * return `Polymer.DomModule.import(this.is, 'template')`.\n       *\n       * If a subclass would like to modify the super class template, it should\n       * clone it rather than modify it in place.  If the getter does expensive\n       * work such as cloning/modifying a template, it should memoize the\n       * template for maximum performance:\n       *\n       *   let memoizedTemplate;\n       *   class MySubClass extends MySuperClass {\n       *     static get template() {\n       *       if (!memoizedTemplate) {\n       *         memoizedTemplate = super.template.cloneNode(true);\n       *         let subContent = document.createElement('div');\n       *         subContent.textContent = 'This came from MySubClass';\n       *         memoizedTemplate.content.appendChild(subContent);\n       *       }\n       *       return memoizedTemplate;\n       *     }\n       *   }\n       *\n       * @return {HTMLTemplateElement|string} Template to be stamped\n       */\n      static get template() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {\n          this._template = Polymer.DomModule && Polymer.DomModule.import(\n            /** @type PolymerElementConstructor*/ (this).is, 'template') ||\n            // note: implemented so a subclass can retrieve the super\n            // template; call the super impl this way so that `this` points\n            // to the superclass.\n            Object.getPrototypeOf(/** @type PolymerElementConstructor*/ (this).prototype).constructor.template;\n        }\n        return this._template;\n      }\n\n      /**\n       * Path matching the url from which the element was imported.\n       * This path is used to resolve url's in template style cssText.\n       * The `importPath` property is also set on element instances and can be\n       * used to create bindings relative to the import path.\n       * Defaults to the path matching the url containing a `dom-module` element\n       * matching this element's static `is` property.\n       * Note, this path should contain a trailing `/`.\n       *\n       * @return {string} The import path for this element class\n       */\n      static get importPath() {\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {\n            const module = Polymer.DomModule && Polymer.DomModule.import(/** @type PolymerElementConstructor */ (this).is);\n            this._importPath = module ? module.assetpath : '' ||\n            Object.getPrototypeOf(/** @type PolymerElementConstructor*/ (this).prototype).constructor.importPath;\n        }\n        return this._importPath;\n      }\n\n      /**\n       * Overrides the default `Polymer.PropertyAccessors` to ensure class\n       * metaprogramming related to property accessors and effects has\n       * completed (calls `finalize`).\n       *\n       * It also initializes any property defaults provided via `value` in\n       * `properties` metadata.\n       *\n       * @override\n       * @suppress {invalidCasts}\n       */\n      _initializeProperties() {\n        Polymer.telemetry.instanceCount++;\n        this.constructor.finalize();\n        const importPath = this.constructor.importPath;\n        // note: finalize template when we have access to `localName` to\n        // avoid dependence on `is` for polyfilling styling.\n        if (this._template && !this._template.__polymerFinalized) {\n          this._template.__polymerFinalized = true;\n          const baseURI =\n            importPath ? Polymer.ResolveUrl.resolveUrl(importPath) : '';\n          finalizeTemplate(/** @type {!PolymerElement} */(this.__proto__), this._template, baseURI,\n            /**@type {!HTMLElement}*/(this).localName);\n        }\n        super._initializeProperties();\n        // set path defaults\n        this.rootPath = Polymer.rootPath;\n        this.importPath = importPath;\n        // apply property defaults...\n        let p$ = propertyDefaultsForClass(this.constructor);\n        if (!p$) {\n          return;\n        }\n        for (let p in p$) {\n          let info = p$[p];\n          // Don't set default value if there is already an own property, which\n          // happens when a `properties` property with default but no effects had\n          // a property set (e.g. bound) by its host before upgrade\n          if (!this.hasOwnProperty(p)) {\n            let value = typeof info.value == 'function' ?\n              info.value.call(this) :\n              info.value;\n            // Set via `_setProperty` if there is an accessor, to enable\n            // initializing readOnly property defaults\n            if (this._hasAccessor(p)) {\n              this._setPendingProperty(p, value, true);\n            } else {\n              this[p] = value;\n            }\n          }\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `connectedCallback`.\n       *\n       * The default implementation enables the property effects system and\n       * flushes any pending properties, and updates shimmed CSS properties\n       * when using the ShadyCSS scoping/custom properties polyfill.\n       *\n       * @suppress {invalidCasts}\n       */\n      connectedCallback() {\n        if (window.ShadyCSS && this._template) {\n          window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));\n        }\n        this._enableProperties();\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `disconnectedCallback`.\n       */\n      disconnectedCallback() {}\n\n      /**\n       * Stamps the element template.\n       *\n       * @override\n       */\n      ready() {\n        if (this._template) {\n          this.root = this._stampTemplate(this._template);\n          this.$ = this.root.$;\n        }\n        super.ready();\n      }\n\n      /**\n       * Implements `PropertyEffects`'s `_readyClients` call. Attaches\n       * element dom by calling `_attachDom` with the dom stamped from the\n       * element's template via `_stampTemplate`. Note that this allows\n       * client dom to be attached to the element prior to any observers\n       * running.\n       *\n       * @override\n       */\n      _readyClients() {\n        if (this._template) {\n          this.root = this._attachDom(this.root);\n        }\n        // The super._readyClients here sets the clients initialized flag.\n        // We must wait to do this until after client dom is created/attached\n        // so that this flag can be checked to prevent notifications fired\n        // during this process from being handled before clients are ready.\n        super._readyClients();\n      }\n\n\n      /**\n       * Attaches an element's stamped dom to itself. By default,\n       * this method creates a `shadowRoot` and adds the dom to it.\n       * However, this method may be overridden to allow an element\n       * to put its dom in another location.\n       *\n       * @throws {Error}\n       * @suppress {missingReturn}\n       * @param {NodeList} dom to attach to the element.\n       * @return {Node} node to which the dom has been attached.\n       */\n      _attachDom(dom) {\n        if (this.attachShadow) {\n          if (dom) {\n            if (!this.shadowRoot) {\n              this.attachShadow({mode: 'open'});\n            }\n            this.shadowRoot.appendChild(dom);\n            return this.shadowRoot;\n          }\n          return null;\n        } else {\n          throw new Error('ShadowDOM not available. ' +\n            // TODO(sorvell): move to compile-time conditional when supported\n          'Polymer.Element can create dom as children instead of in ' +\n          'ShadowDOM by setting `this.root = this;\\` before \\`ready\\`.');\n        }\n      }\n\n      /**\n       * Provides a default implementation of the standard Custom Elements\n       * `attributeChangedCallback`.\n       *\n       * By default, attributes declared in `properties` metadata are\n       * deserialized using their `type` information to properties of the\n       * same name.  \"Dash-cased\" attributes are deserialzed to \"camelCase\"\n       * properties.\n       *\n       * @param {string} name Name of attribute.\n       * @param {?string} old Old value of attribute.\n       * @param {?string} value Current value of attribute.\n       * @override\n       */\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          let property = caseMap.dashToCamelCase(name);\n          let type = propertiesForClass(this.constructor)[property].type;\n          if (!this._hasReadOnlyEffect(property)) {\n            this._attributeToProperty(name, value, type);\n          }\n        }\n      }\n\n      /**\n       * When using the ShadyCSS scoping and custom property shim, causes all\n       * shimmed styles in this element (and its subtree) to be updated\n       * based on current custom property values.\n       *\n       * The optional parameter overrides inline custom property styles with an\n       * object of properties where the keys are CSS properties, and the values\n       * are strings.\n       *\n       * Example: `this.updateStyles({'--color': 'blue'})`\n       *\n       * These properties are retained unless a value of `null` is set.\n       *\n       * @param {Object=} properties Bag of custom property key/values to\n       *   apply to this element.\n       * @suppress {invalidCasts}\n       */\n      updateStyles(properties) {\n        if (window.ShadyCSS) {\n          window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);\n        }\n      }\n\n      /**\n       * Rewrites a given URL relative to a base URL. The base URL defaults to\n       * the original location of the document containing the `dom-module` for\n       * this element. This method will return the same URL before and after\n       * bundling.\n       *\n       * @param {string} url URL to resolve.\n       * @param {string=} base Optional base URL to resolve against, defaults\n       * to the element's `importPath`\n       * @return {string} Rewritten URL relative to base\n       */\n      resolveUrl(url, base) {\n        if (!base && this.importPath) {\n          base = Polymer.ResolveUrl.resolveUrl(this.importPath);\n        }\n        return Polymer.ResolveUrl.resolveUrl(url, base);\n      }\n\n      /**\n       * Overrides `PropertyAccessors` to add map of dynamic functions on\n       * template info, for consumption by `PropertyEffects` template binding\n       * code. This map determines which method templates should have accessors\n       * created for them.\n       *\n       * @override\n       * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do\n       */\n      static _parseTemplateContent(template, templateInfo, nodeInfo) {\n        templateInfo.dynamicFns = templateInfo.dynamicFns || propertiesForClass(this);\n        return super._parseTemplateContent(template, templateInfo, nodeInfo);\n      }\n\n    }\n\n    return PolymerElement;\n  });\n\n  /**\n   * Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   *\n   * @namespace\n   * @summary Provides basic tracking of element definitions (registrations) and\n   * instance counts.\n   */\n  Polymer.telemetry = {\n    /**\n     * Total number of Polymer element instances created.\n     * @type {number}\n     */\n    instanceCount: 0,\n    /**\n     * Array of Polymer element classes that have been finalized.\n     * @type {Array<Polymer.Element>}\n     */\n    registrations: [],\n    /**\n     * @param {!PolymerElementConstructor} prototype Element prototype to log\n     * @this {this}\n     * @private\n     */\n    _regLog: function(prototype) {\n      console.log('[' + prototype.is + ']: registered')\n    },\n    /**\n     * Registers a class prototype for telemetry purposes.\n     * @param {HTMLElement} prototype Element prototype to register\n     * @this {this}\n     * @protected\n     */\n    register: function(prototype) {\n      this.registrations.push(prototype);\n      Polymer.log && this._regLog(prototype);\n    },\n    /**\n     * Logs all elements registered with an `is` to the console.\n     * @public\n     * @this {this}\n     */\n    dumpRegistrations: function() {\n      this.registrations.forEach(this._regLog);\n    }\n  };\n\n  /**\n   * When using the ShadyCSS scoping and custom property shim, causes all\n   * shimmed `styles` (via `custom-style`) in the document (and its subtree)\n   * to be updated based on current custom property values.\n   *\n   * The optional parameter overrides inline custom property styles with an\n   * object of properties where the keys are CSS properties, and the values\n   * are strings.\n   *\n   * Example: `Polymer.updateStyles({'--color': 'blue'})`\n   *\n   * These properties are retained unless a value of `null` is set.\n   *\n   * @param {Object=} props Bag of custom property key/values to\n   *   apply to the document.\n   */\n  Polymer.updateStyles = function(props) {\n    if (window.ShadyCSS) {\n      window.ShadyCSS.styleDocument(props);\n    }\n  };\n\n})();\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/mixins/element-mixin.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n\n<link rel=\"import\" href=\"../utils/boot.html\">\n<link rel=\"import\" href=\"../utils/resolve-url.html\">\n\n<script>\n/** @suppress {deprecated} */\n(function() {\n  'use strict';\n\n  /**\n   * Legacy settings.\n   * @namespace\n   * @memberof Polymer\n   */\n  const settings = Polymer.Settings || {};\n  settings.useShadow = !(window.ShadyDOM);\n  settings.useNativeCSSProperties =\n    Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);\n  settings.useNativeCustomElements =\n    !(window.customElements.polyfillWrapFlushCallback);\n\n  /**\n   * Sets the global, legacy settings.\n   *\n   * @deprecated\n   * @memberof Polymer\n   */\n  Polymer.Settings = settings;\n\n  /**\n   * Globally settable property that is automatically assigned to\n   * `Polymer.ElementMixin` instances, useful for binding in templates to\n   * make URL's relative to an application's root.  Defaults to the main\n   * document URL, but can be overridden by users.  It may be useful to set\n   * `Polymer.rootPath` to provide a stable application mount path when\n   * using client side routing.\n   *\n   * @memberof Polymer\n   */\n  let rootPath = Polymer.rootPath ||\n    Polymer.ResolveUrl.pathFromUrl(document.baseURI || window.location.href);\n\n  Polymer.rootPath = rootPath;\n\n  /**\n   * Sets the global rootPath property used by `Polymer.ElementMixin` and\n   * available via `Polymer.rootPath`.\n   *\n   * @memberof Polymer\n   * @param {string} path The new root path\n   */\n  Polymer.setRootPath = function(path) {\n    Polymer.rootPath = path;\n  }\n})();\n</script>\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/utils/settings.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n<link rel=\"import\" href=\"resolve-url.html\">\n<script>\n(function() {\n  'use strict';\n\n  const MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\n  const INCLUDE_ATTR = 'include';\n\n  function importModule(moduleId) {\n    if (!Polymer.DomModule) {\n      return null;\n    }\n    return Polymer.DomModule.import(moduleId);\n  }\n\n  /** @typedef {{assetpath: string}} */\n  let templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n  /**\n   * Module with utilities for collection CSS text from `<templates>`, external\n   * stylesheets, and `dom-module`s.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for collection CSS text from various sources.\n   */\n  const StyleGather = {\n\n    /**\n     * Returns CSS text of styles in a space-separated list of `dom-module`s.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleIds List of dom-module id's within which to\n     * search for css.\n     * @return {string} Concatenated CSS content from specified `dom-module`s\n     * @this {StyleGather}\n     */\n    cssFromModules(moduleIds) {\n      let modules = moduleIds.trim().split(' ');\n      let cssText = '';\n      for (let i=0; i < modules.length; i++) {\n        cssText += this.cssFromModule(modules[i]);\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n     * can come either from `<style>`s within the first `<template>`, or else\n     * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n     * template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId dom-module id to gather styles from\n     * @return {string} Concatenated CSS content from specified `dom-module`\n     * @this {StyleGather}\n     */\n    cssFromModule(moduleId) {\n      let m = importModule(moduleId);\n      if (m && m._cssText === undefined) {\n        let cssText = '';\n        // include css from the first template in the module\n        let t = m.querySelector('template');\n        if (t) {\n          cssText += this.cssFromTemplate(t, /** @type {templateWithAssetPath }*/(m).assetpath);\n        }\n        // module imports: <link rel=\"import\" type=\"css\">\n        cssText += this.cssFromModuleImports(moduleId);\n        m._cssText = cssText || null;\n      }\n      if (!m) {\n        console.warn('Could not find style data in module named', moduleId);\n      }\n      return m && m._cssText || '';\n    },\n\n    /**\n     * Returns CSS text of `<styles>` within a given template.\n     *\n     * Any `<styles>` processed are removed from their original location.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {HTMLTemplateElement} template Template to gather styles from\n     * @param {string} baseURI Base URI to resolve the URL against\n     * @return {string} Concatenated CSS content from specified template\n     * @this {StyleGather}\n     */\n    cssFromTemplate(template, baseURI) {\n      let cssText = '';\n      // if element is a template, get content from its .content\n      let e$ = template.content.querySelectorAll('style');\n      for (let i=0; i < e$.length; i++) {\n        let e = e$[i];\n        // support style sharing by allowing styles to \"include\"\n        // other dom-modules that contain styling\n        let include = e.getAttribute(INCLUDE_ATTR);\n        if (include) {\n          cssText += this.cssFromModules(include);\n        }\n        e.parentNode.removeChild(e);\n        cssText += baseURI ?\n          Polymer.ResolveUrl.resolveCss(e.textContent, baseURI) : e.textContent;\n      }\n      return cssText;\n    },\n\n    /**\n     * Returns CSS text from stylsheets loaded via `<link rel=\"import\" type=\"css\">`\n     * links within the specified `dom-module`.\n     *\n     * @memberof Polymer.StyleGather\n     * @param {string} moduleId Id of `dom-module` to gather CSS from\n     * @return {string} Concatenated CSS content from links in specified `dom-module`\n     * @this {StyleGather}\n     */\n    cssFromModuleImports(moduleId) {\n      let cssText = '';\n      let m = importModule(moduleId);\n      if (!m) {\n        return cssText;\n      }\n      let p$ = m.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n      for (let i=0; i < p$.length; i++) {\n        let p = p$[i];\n        if (p.import) {\n          let importDoc = p.import;\n          // NOTE: polyfill affordance.\n          // under the HTMLImports polyfill, there will be no 'body',\n          // but the import pseudo-doc can be used directly.\n          let container = importDoc.body ? importDoc.body : importDoc;\n          cssText +=\n            Polymer.ResolveUrl.resolveCss(container.textContent,\n              importDoc.baseURI);\n        }\n      }\n      return cssText;\n    }\n  };\n\n  Polymer.StyleGather = StyleGather;\n})();\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/utils/style-gather.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n<link rel=\"import\" href=\"../utils/boot.html\">\n<link rel=\"import\" href=\"../utils/array-splice.html\">\n<link rel=\"import\" href=\"../utils/async.html\">\n<script>\n(function() {\n  'use strict';\n\n  /**\n   * Returns true if `node` is a slot element\n   * @param {HTMLElement} node Node to test.\n   * @return {boolean} Returns true if the given `node` is a slot\n   * @private\n   */\n  function isSlot(node) {\n    return (node.localName === 'slot');\n  }\n\n  /**\n   * Class that listens for changes (additions or removals) to\n   * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n   * of a node's children and, for any children that are `<slot>` elements,\n   * the expanded flattened list of `assignedNodes`.\n   * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n   * and the `<slot>` has one `<div>` assigned to it, then the flattened\n   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n   * `<slot>` elements assigned to it, these are flattened as well.\n   *\n   * The provided `callback` is called whenever any change to this list\n   * of flattened nodes occurs, where an addition or removal of a node is\n   * considered a change. The `callback` is called with one argument, an object\n   * containing an array of any `addedNodes` and `removedNodes`.\n   *\n   * Note: the callback is called asynchronous to any changes\n   * at a microtask checkpoint. This is because observation is performed using\n   * `MutationObserver` and the `<slot>` element's `slotchange` event which\n   * are asynchronous.\n   *\n   * @memberof Polymer\n   * @summary Class that listens for changes (additions or removals) to\n   * \"flattened nodes\" on a given `node`.\n   */\n  class FlattenedNodesObserver {\n\n    /**\n     * Returns the list of flattened nodes for the given `node`.\n     * This list consists of a node's children and, for any children\n     * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n     * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n     * and the `<slot>` has one `<div>` assigned to it, then the flattened\n     * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n     * `<slot>` elements assigned to it, these are flattened as well.\n     *\n     * @param {HTMLElement|HTMLSlotElement} node The node for which to return the list of flattened nodes.\n     * @return {Array} The list of flattened nodes for the given `node`.\n    */\n    static getFlattenedNodes(node) {\n      if (isSlot(node)) {\n        return /** @type {HTMLSlotElement} */ (node).assignedNodes({flatten: true});\n      } else {\n        return Array.from(node.childNodes).map(node => {\n          if (isSlot(node)) {\n            return /** @type {HTMLSlotElement} */ (node).assignedNodes({flatten: true});\n          } else {\n            return [node];\n          }\n        }).reduce((a, b) => a.concat(b), []);\n      }\n    }\n\n    /**\n     * @param {Node} target Node on which to listen for changes.\n     * @param {Function} callback Function called when there are additions\n     * or removals from the target's list of flattened nodes.\n    */\n    constructor(target, callback) {\n      /** @type {MutationObserver} */\n      this._shadyChildrenObserver = null;\n      /** @type {MutationObserver} */\n      this._nativeChildrenObserver = null;\n      this._connected = false;\n      this._target = target;\n      this.callback = callback;\n      this._effectiveNodes = [];\n      this._observer = null;\n      this._scheduled = false;\n      /** @type {function()} */\n      this._boundSchedule = () => {\n        this._schedule();\n      }\n      this.connect();\n      this._schedule();\n    }\n\n    /**\n     * Activates an observer. This method is automatically called when\n     * a `FlattenedNodesObserver` is created. It should only be called to\n     * re-activate an observer that has been deactivated via the `disconnect` method.\n     */\n    connect() {\n      if (isSlot(this._target)) {\n        this._listenSlots([this._target]);\n      } else {\n        this._listenSlots(this._target.children);\n        if (window.ShadyDOM) {\n          this._shadyChildrenObserver =\n            ShadyDOM.observeChildren(this._target, (mutations) => {\n              this._processMutations(mutations);\n            });\n        } else {\n          this._nativeChildrenObserver =\n            new MutationObserver((mutations) => {\n              this._processMutations(mutations);\n            });\n          this._nativeChildrenObserver.observe(this._target, {childList: true});\n        }\n      }\n      this._connected = true;\n    }\n\n    /**\n     * Deactivates the flattened nodes observer. After calling this method\n     * the observer callback will not be called when changes to flattened nodes\n     * occur. The `connect` method may be subsequently called to reactivate\n     * the observer.\n     */\n    disconnect() {\n      if (isSlot(this._target)) {\n        this._unlistenSlots([this._target]);\n      } else {\n        this._unlistenSlots(this._target.children);\n        if (window.ShadyDOM && this._shadyChildrenObserver) {\n          ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n          this._shadyChildrenObserver = null;\n        } else if (this._nativeChildrenObserver) {\n          this._nativeChildrenObserver.disconnect();\n          this._nativeChildrenObserver = null;\n        }\n      }\n      this._connected = false;\n    }\n\n    _schedule() {\n      if (!this._scheduled) {\n        this._scheduled = true;\n        Polymer.Async.microTask.run(() => this.flush());\n      }\n    }\n\n    _processMutations(mutations) {\n      this._processSlotMutations(mutations);\n      this.flush();\n    }\n\n    _processSlotMutations(mutations) {\n      if (mutations) {\n        for (let i=0; i < mutations.length; i++) {\n          let mutation = mutations[i];\n          if (mutation.addedNodes) {\n            this._listenSlots(mutation.addedNodes);\n          }\n          if (mutation.removedNodes) {\n            this._unlistenSlots(mutation.removedNodes);\n          }\n        }\n      }\n    }\n\n    /**\n     * Flushes the observer causing any pending changes to be immediately\n     * delivered the observer callback. By default these changes are delivered\n     * asynchronously at the next microtask checkpoint.\n     *\n     * @return {boolean} Returns true if any pending changes caused the observer\n     * callback to run.\n     */\n    flush() {\n      if (!this._connected) {\n        return false;\n      }\n      if (window.ShadyDOM) {\n        ShadyDOM.flush();\n      }\n      if (this._nativeChildrenObserver) {\n        this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n      } else if (this._shadyChildrenObserver) {\n        this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n      }\n      this._scheduled = false;\n      let info = {\n        target: this._target,\n        addedNodes: [],\n        removedNodes: []\n      };\n      let newNodes = this.constructor.getFlattenedNodes(this._target);\n      let splices = Polymer.ArraySplice.calculateSplices(newNodes,\n        this._effectiveNodes);\n      // process removals\n      for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n        for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n          info.removedNodes.push(n);\n        }\n      }\n      // process adds\n      for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n        for (let j=s.index; j < s.index + s.addedCount; j++) {\n          info.addedNodes.push(newNodes[j]);\n        }\n      }\n      // update cache\n      this._effectiveNodes = newNodes;\n      let didFlush = false;\n      if (info.addedNodes.length || info.removedNodes.length) {\n        didFlush = true;\n        this.callback.call(this._target, info);\n      }\n      return didFlush;\n    }\n\n    _listenSlots(nodeList) {\n      for (let i=0; i < nodeList.length; i++) {\n        let n = nodeList[i];\n        if (isSlot(n)) {\n          n.addEventListener('slotchange', this._boundSchedule);\n        }\n      }\n    }\n\n    _unlistenSlots(nodeList) {\n      for (let i=0; i < nodeList.length; i++) {\n        let n = nodeList[i];\n        if (isSlot(n)) {\n          n.removeEventListener('slotchange', this._boundSchedule);\n        }\n      }\n    }\n\n  }\n\n  Polymer.FlattenedNodesObserver = FlattenedNodesObserver;\n\n})();\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/utils/flattened-nodes-observer.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n<link rel=\"import\" href=\"boot.html\">\n<script>\n(function() {\n\n  'use strict';\n\n  function newSplice(index, removed, addedCount) {\n    return {\n      index: index,\n      removed: removed,\n      addedCount: addedCount\n    };\n  }\n\n  const EDIT_LEAVE = 0;\n  const EDIT_UPDATE = 1;\n  const EDIT_ADD = 2;\n  const EDIT_DELETE = 3;\n\n  // Note: This function is *based* on the computation of the Levenshtein\n  // \"edit\" distance. The one change is that \"updates\" are treated as two\n  // edits - not one. With Array splices, an update is really a delete\n  // followed by an add. By retaining this, we optimize for \"keeping\" the\n  // maximum array items in the original array. For example:\n  //\n  //   'xxxx123' -> '123yyyy'\n  //\n  // With 1-edit updates, the shortest path would be just to update all seven\n  // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n  // leaves the substring '123' intact.\n  function calcEditDistances(current, currentStart, currentEnd,\n                              old, oldStart, oldEnd) {\n    // \"Deletion\" columns\n    let rowCount = oldEnd - oldStart + 1;\n    let columnCount = currentEnd - currentStart + 1;\n    let distances = new Array(rowCount);\n\n    // \"Addition\" rows. Initialize null column.\n    for (let i = 0; i < rowCount; i++) {\n      distances[i] = new Array(columnCount);\n      distances[i][0] = i;\n    }\n\n    // Initialize null row\n    for (let j = 0; j < columnCount; j++)\n      distances[0][j] = j;\n\n    for (let i = 1; i < rowCount; i++) {\n      for (let j = 1; j < columnCount; j++) {\n        if (equals(current[currentStart + j - 1], old[oldStart + i - 1]))\n          distances[i][j] = distances[i - 1][j - 1];\n        else {\n          let north = distances[i - 1][j] + 1;\n          let west = distances[i][j - 1] + 1;\n          distances[i][j] = north < west ? north : west;\n        }\n      }\n    }\n\n    return distances;\n  }\n\n  // This starts at the final weight, and walks \"backward\" by finding\n  // the minimum previous weight recursively until the origin of the weight\n  // matrix.\n  function spliceOperationsFromEditDistances(distances) {\n    let i = distances.length - 1;\n    let j = distances[0].length - 1;\n    let current = distances[i][j];\n    let edits = [];\n    while (i > 0 || j > 0) {\n      if (i == 0) {\n        edits.push(EDIT_ADD);\n        j--;\n        continue;\n      }\n      if (j == 0) {\n        edits.push(EDIT_DELETE);\n        i--;\n        continue;\n      }\n      let northWest = distances[i - 1][j - 1];\n      let west = distances[i - 1][j];\n      let north = distances[i][j - 1];\n\n      let min;\n      if (west < north)\n        min = west < northWest ? west : northWest;\n      else\n        min = north < northWest ? north : northWest;\n\n      if (min == northWest) {\n        if (northWest == current) {\n          edits.push(EDIT_LEAVE);\n        } else {\n          edits.push(EDIT_UPDATE);\n          current = northWest;\n        }\n        i--;\n        j--;\n      } else if (min == west) {\n        edits.push(EDIT_DELETE);\n        i--;\n        current = west;\n      } else {\n        edits.push(EDIT_ADD);\n        j--;\n        current = north;\n      }\n    }\n\n    edits.reverse();\n    return edits;\n  }\n\n  /**\n   * Splice Projection functions:\n   *\n   * A splice map is a representation of how a previous array of items\n   * was transformed into a new array of items. Conceptually it is a list of\n   * tuples of\n   *\n   *   <index, removed, addedCount>\n   *\n   * which are kept in ascending index order of. The tuple represents that at\n   * the |index|, |removed| sequence of items were removed, and counting forward\n   * from |index|, |addedCount| items were added.\n   */\n\n  /**\n   * Lacking individual splice mutation information, the minimal set of\n   * splices can be synthesized given the previous state and final state of an\n   * array. The basic approach is to calculate the edit distance matrix and\n   * choose the shortest path through it.\n   *\n   * Complexity: O(l * p)\n   *   l: The length of the current array\n   *   p: The length of the old array\n   *\n   * @param {Array} current The current \"changed\" array for which to\n   * calculate splices.\n   * @param {number} currentStart Starting index in the `current` array for\n   * which splices are calculated.\n   * @param {number} currentEnd Ending index in the `current` array for\n   * which splices are calculated.\n   * @param {Array} old The original \"unchanged\" array to compare `current`\n   * against to determine splices.\n   * @param {number} oldStart Starting index in the `old` array for\n   * which splices are calculated.\n   * @param {number} oldEnd Ending index in the `old` array for\n   * which splices are calculated.\n   * @return {Array} Returns an array of splice record objects. Each of these\n   * contains: `index` the location where the splice occurred; `removed`\n   * the array of removed items from this location; `addedCount` the number\n   * of items added at this location.\n   */\n  function calcSplices(current, currentStart, currentEnd,\n                        old, oldStart, oldEnd) {\n    let prefixCount = 0;\n    let suffixCount = 0;\n    let splice;\n\n    let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n    if (currentStart == 0 && oldStart == 0)\n      prefixCount = sharedPrefix(current, old, minLength);\n\n    if (currentEnd == current.length && oldEnd == old.length)\n      suffixCount = sharedSuffix(current, old, minLength - prefixCount);\n\n    currentStart += prefixCount;\n    oldStart += prefixCount;\n    currentEnd -= suffixCount;\n    oldEnd -= suffixCount;\n\n    if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\n      return [];\n\n    if (currentStart == currentEnd) {\n      splice = newSplice(currentStart, [], 0);\n      while (oldStart < oldEnd)\n        splice.removed.push(old[oldStart++]);\n\n      return [ splice ];\n    } else if (oldStart == oldEnd)\n      return [ newSplice(currentStart, [], currentEnd - currentStart) ];\n\n    let ops = spliceOperationsFromEditDistances(\n        calcEditDistances(current, currentStart, currentEnd,\n                               old, oldStart, oldEnd));\n\n    splice = undefined;\n    let splices = [];\n    let index = currentStart;\n    let oldIndex = oldStart;\n    for (let i = 0; i < ops.length; i++) {\n      switch(ops[i]) {\n        case EDIT_LEAVE:\n          if (splice) {\n            splices.push(splice);\n            splice = undefined;\n          }\n\n          index++;\n          oldIndex++;\n          break;\n        case EDIT_UPDATE:\n          if (!splice)\n            splice = newSplice(index, [], 0);\n\n          splice.addedCount++;\n          index++;\n\n          splice.removed.push(old[oldIndex]);\n          oldIndex++;\n          break;\n        case EDIT_ADD:\n          if (!splice)\n            splice = newSplice(index, [], 0);\n\n          splice.addedCount++;\n          index++;\n          break;\n        case EDIT_DELETE:\n          if (!splice)\n            splice = newSplice(index, [], 0);\n\n          splice.removed.push(old[oldIndex]);\n          oldIndex++;\n          break;\n      }\n    }\n\n    if (splice) {\n      splices.push(splice);\n    }\n    return splices;\n  }\n\n  function sharedPrefix(current, old, searchLength) {\n    for (let i = 0; i < searchLength; i++)\n      if (!equals(current[i], old[i]))\n        return i;\n    return searchLength;\n  }\n\n  function sharedSuffix(current, old, searchLength) {\n    let index1 = current.length;\n    let index2 = old.length;\n    let count = 0;\n    while (count < searchLength && equals(current[--index1], old[--index2]))\n      count++;\n\n    return count;\n  }\n\n  function calculateSplices(current, previous) {\n    return calcSplices(current, 0, current.length, previous, 0,\n                            previous.length);\n  }\n\n  function equals(currentValue, previousValue) {\n    return currentValue === previousValue;\n  }\n\n  /**\n   * @namespace\n   * @memberof Polymer\n   * @summary Module that provides utilities for diffing arrays.\n   */\n  Polymer.ArraySplice = {\n    /**\n     * Returns an array of splice records indicating the minimum edits required\n     * to transform the `previous` array into the `current` array.\n     *\n     * Splice records are ordered by index and contain the following fields:\n     * - `index`: index where edit started\n     * - `removed`: array of removed items from this index\n     * - `addedCount`: number of items added at this index\n     *\n     * This function is based on the Levenshtein \"minimum edit distance\"\n     * algorithm. Note that updates are treated as removal followed by addition.\n     *\n     * The worst-case time complexity of this algorithm is `O(l * p)`\n     *   l: The length of the current array\n     *   p: The length of the previous array\n     *\n     * However, the worst-case complexity is reduced by an `O(n)` optimization\n     * to detect any shared prefix & suffix between the two arrays and only\n     * perform the more expensive minimum edit distance calculation over the\n     * non-shared portions of the arrays.\n     *\n     * @memberof Polymer.ArraySplice\n     * @param {Array} current The \"changed\" array for which splices will be\n     * calculated.\n     * @param {Array} previous The \"unchanged\" original array to compare\n     * `current` against to determine the splices.\n     * @return {Array} Returns an array of splice record objects. Each of these\n     * contains: `index` the location where the splice occurred; `removed`\n     * the array of removed items from this location; `addedCount` the number\n     * of items added at this location.\n     */\n    calculateSplices\n  }\n\n})();\n</script>\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/utils/array-splice.html","import 'polymer/polymer-element.html'\nimport 'polymer/lib/utils/flattened-nodes-observer.html'\nimport LocationMixin from '../mixins/location-mixin.js'\nimport QueryParamsMixin from '../mixins/query-params-mixin.js'\nimport pathToRegexp from 'path-to-regexp'\nimport routing from '../../src/routing.js'\nimport httpCodes from '../../src/http-codes.js'\nimport partials from '../../src/partials.js'\nimport auth from '../../src/authentication/index.js'\n\nconst messages = []\nclass AppShell extends QueryParamsMixin(LocationMixin(Polymer.Element)) {\n  static get is () { return 'app-shell' }\n\n  static get properties () {\n    return {\n      params: {\n        type: Object\n      },\n\n      queryParams: {\n        type: Object\n      },\n\n      currentRoute: {\n        type: String\n      },\n\n      // location-mixin\n      path: {\n        type: String\n      },\n\n      query: {\n        type: String,\n        observer: '_queryChanged'\n      },\n\n      urlSpaceRegex: {\n        type: String\n      },\n\n      hash: {\n        type: String\n      },\n\n      dwellTime: {\n        type: Number\n      },\n\n      _urlSpaceRegExp: {\n        type: String,\n        computed: '_makeRegExp(urlSpaceRegex)'\n      },\n\n      _lastChangedAt: {\n        type: String\n      },\n\n      _initialized: {\n        type: Boolean\n      },\n\n      // query params 'paramsString', 'paramsObject', '_dontReact'\n\n      paramsString: {\n        type: String,\n        observer: '_paramsStringChanged'\n      },\n\n      paramsObject: {\n        type: Object\n      },\n\n      _dontReact: {\n        type: Boolean\n      }\n    }\n  }\n\n  static get observers () {\n    return [\n      '_pathChanged(path)',\n      '_updateUrl(path, query, hash)'\n    ]\n  }\n\n  static get template () {\n    return `\n      <style is=\"custom-style\">\n        div[role='main'] {\n          position: relative;\n        }\n\n        ::slotted(.page) {\n          position: absolute;\n          background-color: white;\n          width: 100%;\n          top: 0;\n          opacity: 0;\n          z-index: -1;\n          transition: opacity 0.3s;\n          display: none;\n        }\n\n        ::slotted(*) > .page {\n          position: absolute;\n          background-color: white;\n          width: 100%;\n          top: 0;\n          opacity: 0;\n          z-index: -1;\n          transition: opacity 0.3s;\n          display: none;\n        }\n\n        ::slotted(.page--on-view) {\n          position: relative !important;\n          opacity: 1;\n          z-index: 0;\n          display: block;\n        }\n\n        ::slotted(*) > .page--on-view {\n          position: relative !important;\n          opacity: 1;\n          z-index: 0;\n          display: block;\n        }\n      </style>\n\n      <div class=\"main\">\n        <slot></slot>\n      </div>\n\n      <app-toast></app-toast>\n    `\n  }\n\n  constructor () {\n    super()\n    this._routes = {}\n  }\n\n  connectedCallback () {\n    super.connectedCallback()\n    this._observer = new Polymer.FlattenedNodesObserver(this, (info) => {\n      this._contentAdded(info.addedNodes.filter((node) => (node.nodeType === window.Node.ELEMENT_NODE)))\n    })\n    import(/* webpackChunkName: \"app-toast\" */ '../modules/app-toast/components/app-toast.html').then(() => {\n      var messageInterval = setInterval(() => {\n        if (messages.length > 0) {\n          var {message, optTapHandler, optAction, optActionHandler, optDuration} = messages.pop()\n          this.showMessage(message, optTapHandler, optAction, optActionHandler, optDuration)\n        } else {\n          clearInterval(messageInterval)\n          messageInterval = null\n        }\n      }, 5000)\n    })\n  }\n\n  disconnectedCallback () {\n    if (super.disconnectedCallback) {\n      super.disconnectedCallback()\n    }\n    if (this._observer) this._observer.disconnect()\n  }\n\n  showMessage (message, optTapHandler, optAction, optActionHandler, optDuration) {\n    if (this.shadowRoot.querySelector('app-toast').showMessage) {\n      this.shadowRoot.querySelector('app-toast').showMessage(message, optTapHandler, optAction, optActionHandler, optDuration)\n    } else {\n      messages.push({message, optTapHandler, optAction, optActionHandler, optDuration})\n    }\n  }\n\n  closeToast () {\n    this.shadowRoot.querySelector('app-toast').close()\n  }\n\n  _contentAdded (pages) {\n    pages.forEach(page => {\n      page.classList.add('page')\n      this._routes[page.getAttribute('route')] = {\n        element: page,\n        auth: page.getAttribute('auth')\n      }\n    })\n    this._pathChanged(this.path)\n  }\n\n  _pathChanged (path) {\n    // load statistics if it went through here\n    if (path === '/_statistic.html' || path === '/_bundle-sizes.html') {\n      window.location.href = path\n      return\n    }\n\n    path = path.replace(/index\\.html$/, '')\n\n    var routeName = null\n    Object.entries(this._routes).forEach(route => {\n      if (routeName) return\n      var params = {}\n      const keys = []\n      const re = pathToRegexp(route[0], keys)\n      const exec = re.exec(path)\n\n      if (exec) {\n        params = {}\n        for (var j = 0; j < keys.length; j++) {\n          params[keys[j].name] = exec[j + 1]\n        }\n        routeName = route[0]\n        this.params = params\n      }\n    })\n\n    this._checkAuth(routeName || 'not-found')\n  }\n\n  _checkAuth (route) {\n    if (this._routes[route] && this._routes[route].auth && auth[this._routes[route].auth]) {\n      if (auth[this._routes[route].auth] instanceof Promise) {\n        auth[this._routes[route].auth]()\n        .then((res) => {\n          if (res) {\n            this._loadPage(route)\n          } else {\n            this._loadPage('not-authorized')\n          }\n        })\n        .catch((e) => {\n          console.log(e)\n          this._loadPage('not-authorized')\n        })\n      } else if (typeof auth[this._routes[route].auth] === 'function' && auth[this._routes[route].auth](this)) {\n        this._loadPage(route)\n      } else {\n        this._loadPage('not-authorized')\n      }\n    } else {\n      this._loadPage(route)\n    }\n  }\n\n  _loadPage (route) {\n    const routes = Object.assign({}, routing, httpCodes)\n    for (var i in this._routes) {\n      if (this._routes[i] && this._routes[i].element) this._routes[i].element.classList.remove('page--on-view')\n    }\n\n    if (this._routes[route] && this._routes[route].element) {\n      this._routes[route].element.classList.add('page--on-view')\n    }\n    if (this._routes[route]) {\n      routes[route]().then(() => {\n        this._routes[route].element._setProperty('params', this.params)\n        this._routes[route].element._setProperty('queryParams', this.paramsObject)\n        if (window.ga) {\n          ga('set', 'page', this.path)\n          ga('send', 'pageview')\n        }\n      })\n    }\n  }\n}\n\nwindow.customElements.define(AppShell.is, AppShell)\n\n// load partials here\nfor (var p in partials) {\n  partials[p]()\n}\n\nexport default AppShell\n\n\n\n// WEBPACK FOOTER //\n// ../core/shell/index.js","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n<link rel=\"import\" href=\"../utils/boot.html\">\n<link rel=\"import\" href=\"../utils/resolve-url.html\">\n<script>\n(function() {\n  'use strict';\n\n  let modules = {};\n  let lcModules = {};\n  function findModule(id) {\n    return modules[id] || lcModules[id.toLowerCase()];\n  }\n\n  function styleOutsideTemplateCheck(inst) {\n    if (inst.querySelector('style')) {\n      console.warn('dom-module %s has style outside template', inst.id);\n    }\n  }\n\n  /**\n   * The `dom-module` element registers the dom it contains to the name given\n   * by the module's id attribute. It provides a unified database of dom\n   * accessible via its static `import` API.\n   *\n   * A key use case of `dom-module` is for providing custom element `<template>`s\n   * via HTML imports that are parsed by the native HTML parser, that can be\n   * relocated during a bundling pass and still looked up by `id`.\n   *\n   * Example:\n   *\n   *     <dom-module id=\"foo\">\n   *       <img src=\"stuff.png\">\n   *     </dom-module>\n   *\n   * Then in code in some other location that cannot access the dom-module above\n   *\n   *     let img = document.createElement('dom-module').import('foo', 'img');\n   *\n   * @customElement\n   * @extends HTMLElement\n   * @memberof Polymer\n   * @summary Custom element that provides a registry of relocatable DOM content\n   *   by `id` that is agnostic to bundling.\n   * @unrestricted\n   */\n  class DomModule extends HTMLElement {\n\n    static get observedAttributes() { return ['id'] }\n\n    /**\n     * Retrieves the element specified by the css `selector` in the module\n     * registered by `id`. For example, this.import('foo', 'img');\n     * @param {string} id The id of the dom-module in which to search.\n     * @param {string=} selector The css selector by which to find the element.\n     * @return {Element} Returns the element which matches `selector` in the\n     * module registered at the specified `id`.\n     */\n    static import(id, selector) {\n      if (id) {\n        let m = findModule(id);\n        if (m && selector) {\n          return m.querySelector(selector);\n        }\n        return m;\n      }\n      return null;\n    }\n\n    attributeChangedCallback(name, old, value) {\n      if (old !== value) {\n        this.register();\n      }\n    }\n\n    /**\n     * The absolute URL of the original location of this `dom-module`.\n     *\n     * This value will differ from this element's `ownerDocument` in the\n     * following ways:\n     * - Takes into account any `assetpath` attribute added during bundling\n     *   to indicate the original location relative to the bundled location\n     * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n     *   the path is relative to the import document's location since\n     *   `ownerDocument` is not currently polyfilled\n     */\n    get assetpath() {\n      // Don't override existing assetpath.\n      if (!this.__assetpath) {\n        // note: assetpath set via an attribute must be relative to this\n        // element's location; accomodate polyfilled HTMLImports\n        const owner = window.HTMLImports && HTMLImports.importForElement ?\n          HTMLImports.importForElement(this) || document : this.ownerDocument;\n        const url = Polymer.ResolveUrl.resolveUrl(\n          this.getAttribute('assetpath') || '', owner.baseURI);\n        this.__assetpath = Polymer.ResolveUrl.pathFromUrl(url);\n      }\n      return this.__assetpath;\n    }\n\n    /**\n     * Registers the dom-module at a given id. This method should only be called\n     * when a dom-module is imperatively created. For\n     * example, `document.createElement('dom-module').register('foo')`.\n     * @param {string=} id The id at which to register the dom-module.\n     */\n    register(id) {\n      id = id || this.id;\n      if (id) {\n        this.id = id;\n        // store id separate from lowercased id so that\n        // in all cases mixedCase id will stored distinctly\n        // and lowercase version is a fallback\n        modules[id] = this;\n        lcModules[id.toLowerCase()] = this;\n        styleOutsideTemplateCheck(this);\n      }\n    }\n  }\n\n  DomModule.prototype['modules'] = modules;\n\n  customElements.define('dom-module', DomModule);\n\n  // export\n  Polymer.DomModule = DomModule;\n\n})();\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/elements/dom-module.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n\n<link rel=\"import\" href=\"boot.html\">\n\n<script>\n(function() {\n  'use strict';\n\n  /**\n   * Module with utilities for manipulating structured data path strings.\n   *\n   * @namespace\n   * @memberof Polymer\n   * @summary Module with utilities for manipulating structured data path strings.\n   */\n  const Path = {\n\n    /**\n     * Returns true if the given string is a structured data path (has dots).\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isPath('foo.bar.baz') // true\n     * Polymer.Path.isPath('foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {boolean} True if the string contained one or more dots\n     */\n    isPath: function(path) {\n      return path.indexOf('.') >= 0;\n    },\n\n    /**\n     * Returns the root property name for the given path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.root('foo.bar.baz') // 'foo'\n     * Polymer.Path.root('foo')         // 'foo'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} path Path string\n     * @return {string} Root property name\n     */\n    root: function(path) {\n      let dotIndex = path.indexOf('.');\n      if (dotIndex === -1) {\n        return path;\n      }\n      return path.slice(0, dotIndex);\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n     * Returns true if the given path is an ancestor of the base path.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isAncestor('foo.bar', 'foo')         // true\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isAncestor('foo.bar', 'foo.bar.baz') // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Path string to test against.\n     * @param {string} path Path string to test.\n     * @return {boolean} True if `path` is an ancestor of `base`.\n     */\n    isAncestor: function(base, path) {\n      //     base.startsWith(path + '.');\n      return base.indexOf(path + '.') === 0;\n    },\n\n    /**\n     * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar.baz') // true\n     * Polymer.Path.isDescendant('foo.bar', 'foo.bar')     // false\n     * Polymer.Path.isDescendant('foo.bar', 'foo')         // false\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Path string to test against.\n     * @param {string} path Path string to test.\n     * @return {boolean} True if `path` is a descendant of `base`.\n     */\n    isDescendant: function(base, path) {\n      //     path.startsWith(base + '.');\n      return path.indexOf(base + '.') === 0;\n    },\n\n    /**\n     * Replaces a previous base path with a new base path, preserving the\n     * remainder of the path.\n     *\n     * User must ensure `path` has a prefix of `base`.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.translate('foo.bar', 'zot' 'foo.bar.baz') // 'zot.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string} base Current base string to remove\n     * @param {string} newBase New base string to replace with\n     * @param {string} path Path to translate\n     * @return {string} Translated string\n     */\n    translate: function(base, newBase, path) {\n      return newBase + path.slice(base.length);\n    },\n\n    /**\n     * @param {string} base Path string to test against\n     * @param {string} path Path string to test\n     * @return {boolean} True if `path` is equal to `base`\n     * @this {Path}\n     */\n    matches: function(base, path) {\n      return (base === path) ||\n             this.isAncestor(base, path) ||\n             this.isDescendant(base, path);\n    },\n\n    /**\n     * Converts array-based paths to flattened path.  String-based paths\n     * are returned as-is.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'\n     * Polymer.Path.normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {string} Flattened path\n     */\n    normalize: function(path) {\n      if (Array.isArray(path)) {\n        let parts = [];\n        for (let i=0; i<path.length; i++) {\n          let args = path[i].toString().split('.');\n          for (let j=0; j<args.length; j++) {\n            parts.push(args[j]);\n          }\n        }\n        return parts.join('.');\n      } else {\n        return path;\n      }\n    },\n\n    /**\n     * Splits a path into an array of property names. Accepts either arrays\n     * of path parts or strings.\n     *\n     * Example:\n     *\n     * ```\n     * Polymer.Path.split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']\n     * Polymer.Path.split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']\n     * ```\n     *\n     * @memberof Polymer.Path\n     * @param {string | !Array<string|number>} path Input path\n     * @return {!Array<string>} Array of path parts\n     * @this {Path}\n     * @suppress {checkTypes}\n     */\n    split: function(path) {\n      if (Array.isArray(path)) {\n        return this.normalize(path).split('.');\n      }\n      return path.toString().split('.');\n    },\n\n    /**\n     * Reads a value from a path.  If any sub-property in the path is `undefined`,\n     * this method returns `undefined` (will never throw.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to read\n     * @param {Object=} info If an object is provided to `info`, the normalized\n     *  (flattened) path will be set to `info.path`.\n     * @return {*} Value at path, or `undefined` if the path could not be\n     *  fully dereferenced.\n     * @this {Path}\n     */\n    get: function(root, path, info) {\n      let prop = root;\n      let parts = this.split(path);\n      // Loop over path parts[0..n-1] and dereference\n      for (let i=0; i<parts.length; i++) {\n        if (!prop) {\n          return;\n        }\n        let part = parts[i];\n        prop = prop[part];\n      }\n      if (info) {\n        info.path = parts.join('.');\n      }\n      return prop;\n    },\n\n    /**\n     * Sets a value to a path.  If any sub-property in the path is `undefined`,\n     * this method will no-op.\n     *\n     * @memberof Polymer.Path\n     * @param {Object} root Object from which to dereference path from\n     * @param {string | !Array<string|number>} path Path to set\n     * @param {*} value Value to set to path\n     * @return {string | undefined} The normalized version of the input path\n     * @this {Path}\n     */\n    set: function(root, path, value) {\n      let prop = root;\n      let parts = this.split(path);\n      let last = parts[parts.length-1];\n      if (parts.length > 1) {\n        // Loop over path parts[0..n-2] and dereference\n        for (let i=0; i<parts.length-1; i++) {\n          let part = parts[i];\n          prop = prop[part];\n          if (!prop) {\n            return;\n          }\n        }\n        // Set value to object at end of path\n        prop[last] = value;\n      } else {\n        // Simple property set\n        prop[path] = value;\n      }\n      return parts.join('.');\n    }\n\n  };\n\n  /**\n   * Returns true if the given string is a structured data path (has dots).\n   *\n   * This function is deprecated.  Use `Polymer.Path.isPath` instead.\n   *\n   * Example:\n   *\n   * ```\n   * Polymer.Path.isDeep('foo.bar.baz') // true\n   * Polymer.Path.isDeep('foo')         // false\n   * ```\n   *\n   * @deprecated\n   * @memberof Polymer.Path\n   * @param {string} path Path string\n   * @return {boolean} True if the string contained one or more dots\n   */\n  Path.isDeep = Path.isPath;\n\n  Polymer.Path = Path;\n\n})();\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/utils/path.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n\n<link rel=\"import\" href=\"../utils/boot.html\">\n<link rel=\"import\" href=\"../utils/mixin.html\">\n<link rel=\"import\" href=\"../utils/case-map.html\">\n<link rel=\"import\" href=\"../utils/async.html\">\n\n<script>\n(function() {\n\n  'use strict';\n\n  let caseMap = Polymer.CaseMap;\n\n  let microtask = Polymer.Async.microTask;\n\n  // Save map of native properties; this forms a blacklist or properties\n  // that won't have their values \"saved\" by `saveAccessorValue`, since\n  // reading from an HTMLElement accessor from the context of a prototype throws\n  const nativeProperties = {};\n  let proto = HTMLElement.prototype;\n  while (proto) {\n    let props = Object.getOwnPropertyNames(proto);\n    for (let i=0; i<props.length; i++) {\n      nativeProperties[props[i]] = true;\n    }\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  /**\n   * Used to save the value of a property that will be overridden with\n   * an accessor. If the `model` is a prototype, the values will be saved\n   * in `__dataProto`, and it's up to the user (or downstream mixin) to\n   * decide how/when to set these values back into the accessors.\n   * If `model` is already an instance (it has a `__data` property), then\n   * the value will be set as a pending property, meaning the user should\n   * call `_invalidateProperties` or `_flushProperties` to take effect\n   *\n   * @param {Object} model Prototype or instance\n   * @param {string} property Name of property\n   * @private\n   */\n  function saveAccessorValue(model, property) {\n    // Don't read/store value for any native properties since they could throw\n    if (!nativeProperties[property]) {\n      let value = model[property];\n      if (value !== undefined) {\n        if (model.__data) {\n          // Adding accessor to instance; update the property\n          // It is the user's responsibility to call _flushProperties\n          model._setPendingProperty(property, value);\n        } else {\n          // Adding accessor to proto; save proto's value for instance-time use\n          if (!model.__dataProto) {\n            model.__dataProto = {};\n          } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {\n            model.__dataProto = Object.create(model.__dataProto);\n          }\n          model.__dataProto[property] = value;\n        }\n      }\n    }\n  }\n\n  /**\n   * Element class mixin that provides basic meta-programming for creating one\n   * or more property accessors (getter/setter pair) that enqueue an async\n   * (batched) `_propertiesChanged` callback.\n   *\n   * For basic usage of this mixin, simply declare attributes to observe via\n   * the standard `static get observedAttributes()`, implement `_propertiesChanged`\n   * on the class, and then call `MyClass.createPropertiesForAttributes()` once\n   * on the class to generate property accessors for each observed attribute\n   * prior to instancing.  Last, call `this._flushProperties()` once to enable\n   * the accessors.\n   *\n   * Any `observedAttributes` will automatically be\n   * deserialized via `attributeChangedCallback` and set to the associated\n   * property using `dash-case`-to-`camelCase` convention.\n   *\n   * @mixinFunction\n   * @polymer\n   * @memberof Polymer\n   * @summary Element class mixin for reacting to property changes from\n   *   generated property accessors.\n   */\n  Polymer.PropertyAccessors = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @implements {Polymer_PropertyAccessors}\n     * @extends HTMLElement\n     * @unrestricted\n     */\n    class PropertyAccessors extends superClass {\n\n      /**\n       * Generates property accessors for all attributes in the standard\n       * static `observedAttributes` array.\n       *\n       * Attribute names are mapped to property names using the `dash-case` to\n       * `camelCase` convention\n       *\n       */\n      static createPropertiesForAttributes() {\n        let a$ = this.observedAttributes;\n        for (let i=0; i < a$.length; i++) {\n          this.prototype._createPropertyAccessor(caseMap.dashToCamelCase(a$[i]));\n        }\n      }\n\n      constructor() {\n        super();\n        /** @type {boolean} */\n        this.__serializing;\n        /** @type {number} */\n        this.__dataCounter;\n        /** @type {boolean} */\n        this.__dataEnabled;\n        /** @type {boolean} */\n        this.__dataReady;\n        /** @type {boolean} */\n        this.__dataInvalid;\n        /** @type {!Object} */\n        this.__data;\n        /** @type {Object} */\n        this.__dataPending;\n        /** @type {Object} */\n        this.__dataOld;\n        /** @type {Object} */\n        this.__dataProto;\n        /** @type {Object} */\n        this.__dataHasAccessor;\n        /** @type {Object} */\n        this.__dataInstanceProps;\n        this._initializeProperties();\n      }\n\n      /**\n       * Implements native Custom Elements `attributeChangedCallback` to\n       * set an attribute value to a property via `_attributeToProperty`.\n       *\n       * @param {string} name Name of attribute that changed\n       * @param {?string} old Old attribute value\n       * @param {?string} value New attribute value\n       */\n      attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n          this._attributeToProperty(name, value);\n        }\n      }\n\n      /**\n       * Initializes the local storage for property accessors.\n       *\n       * Provided as an override point for performing any setup work prior\n       * to initializing the property accessor system.\n       *\n       * @protected\n       */\n      _initializeProperties() {\n        this.__serializing = false;\n        this.__dataCounter = 0;\n        this.__dataEnabled = false;\n        this.__dataReady = false;\n        this.__dataInvalid = false;\n        this.__data = {};\n        this.__dataPending = null;\n        this.__dataOld = null;\n        if (this.__dataProto) {\n          this._initializeProtoProperties(this.__dataProto);\n          this.__dataProto = null;\n        }\n        // Capture instance properties; these will be set into accessors\n        // during first flush. Don't set them here, since we want\n        // these to overwrite defaults/constructor assignments\n        for (let p in this.__dataHasAccessor) {\n          if (this.hasOwnProperty(p)) {\n            this.__dataInstanceProps = this.__dataInstanceProps || {};\n            this.__dataInstanceProps[p] = this[p];\n            delete this[p];\n          }\n        }\n      }\n\n      /**\n       * Called at instance time with bag of properties that were overwritten\n       * by accessors on the prototype when accessors were created.\n       *\n       * The default implementation sets these properties back into the\n       * setter at instance time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeProtoProperties(props) {\n        for (let p in props) {\n          this._setProperty(p, props[p]);\n        }\n      }\n\n      /**\n       * Called at ready time with bag of instance properties that overwrote\n       * accessors when the element upgraded.\n       *\n       * The default implementation sets these properties back into the\n       * setter at ready time.  This method is provided as an override\n       * point for customizing or providing more efficient initialization.\n       *\n       * @param {Object} props Bag of property values that were overwritten\n       *   when creating property accessors.\n       * @protected\n       */\n      _initializeInstanceProperties(props) {\n        Object.assign(this, props);\n      }\n\n      /**\n       * Ensures the element has the given attribute. If it does not,\n       * assigns the given value to the attribute.\n       *\n       *\n       * @param {string} attribute Name of attribute to ensure is set.\n       * @param {string} value of the attribute.\n       */\n      _ensureAttribute(attribute, value) {\n        if (!this.hasAttribute(attribute)) {\n          this._valueToNodeAttribute(this, value, attribute);\n        }\n      }\n\n      /**\n       * Deserializes an attribute to its associated property.\n       *\n       * This method calls the `_deserializeValue` method to convert the string to\n       * a typed value.\n       *\n       * @param {string} attribute Name of attribute to deserialize.\n       * @param {?string} value of the attribute.\n       * @param {*=} type type to deserialize to.\n       */\n      _attributeToProperty(attribute, value, type) {\n        // Don't deserialize back to property if currently reflecting\n        if (!this.__serializing) {\n          let property = caseMap.dashToCamelCase(attribute);\n          this[property] = this._deserializeValue(value, type);\n        }\n      }\n\n      /**\n       * Serializes a property to its associated attribute.\n       *\n       * @param {string} property Property name to reflect.\n       * @param {string=} attribute Attribute name to reflect.\n       * @param {*=} value Property value to refect.\n       */\n      _propertyToAttribute(property, attribute, value) {\n        this.__serializing = true;\n        value = (arguments.length < 3) ? this[property] : value;\n        this._valueToNodeAttribute(this, value,\n          attribute || caseMap.camelToDashCase(property));\n        this.__serializing = false;\n      }\n\n      /**\n       * Sets a typed value to an HTML attribute on a node.\n       *\n       * This method calls the `_serializeValue` method to convert the typed\n       * value to a string.  If the `_serializeValue` method returns `undefined`,\n       * the attribute will be removed (this is the default for boolean\n       * type `false`).\n       *\n       * @param {Element} node Element to set attribute to.\n       * @param {*} value Value to serialize.\n       * @param {string} attribute Attribute name to serialize to.\n       */\n      _valueToNodeAttribute(node, value, attribute) {\n        let str = this._serializeValue(value);\n        if (str === undefined) {\n          node.removeAttribute(attribute);\n        } else {\n          node.setAttribute(attribute, str);\n        }\n      }\n\n      /**\n       * Converts a typed JavaScript value to a string.\n       *\n       * This method is called by Polymer when setting JS property values to\n       * HTML attributes.  Users may override this method on Polymer element\n       * prototypes to provide serialization for custom types.\n       *\n       * @param {*} value Property value to serialize.\n       * @return {string | undefined} String serialized from the provided property value.\n       */\n      _serializeValue(value) {\n        /* eslint-disable no-fallthrough */\n        switch (typeof value) {\n          case 'boolean':\n            return value ? '' : undefined;\n\n          case 'object':\n            if (value instanceof Date) {\n              return value.toString();\n            } else if (value) {\n              try {\n                return JSON.stringify(value);\n              } catch(x) {\n                return '';\n              }\n            }\n\n          default:\n            return value != null ? value.toString() : undefined;\n        }\n      }\n\n      /**\n       * Converts a string to a typed JavaScript value.\n       *\n       * This method is called by Polymer when reading HTML attribute values to\n       * JS properties.  Users may override this method on Polymer element\n       * prototypes to provide deserialization for custom `type`s.  Note,\n       * the `type` argument is the value of the `type` field provided in the\n       * `properties` configuration object for a given property, and is\n       * by convention the constructor for the type to deserialize.\n       *\n       * Note: The return value of `undefined` is used as a sentinel value to\n       * indicate the attribute should be removed.\n       *\n       * @param {?string} value Attribute value to deserialize.\n       * @param {*=} type Type to deserialize the string to.\n       * @return {*} Typed value deserialized from the provided string.\n       */\n      _deserializeValue(value, type) {\n        /**\n         * @type {*}\n         */\n        let outValue;\n        switch (type) {\n          case Number:\n            outValue = Number(value);\n            break;\n\n          case Boolean:\n            outValue = (value !== null);\n            break;\n\n          case Object:\n            try {\n              outValue = JSON.parse(/** @type string */(value));\n            } catch(x) {\n              // allow non-JSON literals like Strings and Numbers\n            }\n            break;\n\n          case Array:\n            try {\n              outValue = JSON.parse(/** @type string */(value));\n            } catch(x) {\n              outValue = null;\n              console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);\n            }\n            break;\n\n          case Date:\n            outValue = new Date(value);\n            break;\n\n          case String:\n          default:\n            outValue = value;\n            break;\n        }\n\n        return outValue;\n      }\n      /* eslint-enable no-fallthrough */\n\n      /**\n       * Creates a setter/getter pair for the named property with its own\n       * local storage.  The getter returns the value in the local storage,\n       * and the setter calls `_setProperty`, which updates the local storage\n       * for the property and enqueues a `_propertiesChanged` callback.\n       *\n       * This method may be called on a prototype or an instance.  Calling\n       * this method may overwrite a property value that already exists on\n       * the prototype/instance by creating the accessor.  When calling on\n       * a prototype, any overwritten values are saved in `__dataProto`,\n       * and it is up to the subclasser to decide how/when to set those\n       * properties back into the accessor.  When calling on an instance,\n       * the overwritten value is set via `_setPendingProperty`, and the\n       * user should call `_invalidateProperties` or `_flushProperties`\n       * for the values to take effect.\n       *\n       * @param {string} property Name of the property\n       * @param {boolean=} readOnly When true, no setter is created; the\n       *   protected `_setProperty` function must be used to set the property\n       * @protected\n       */\n      _createPropertyAccessor(property, readOnly) {\n        if (!this.hasOwnProperty('__dataHasAccessor')) {\n          this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);\n        }\n        if (!this.__dataHasAccessor[property]) {\n          this.__dataHasAccessor[property] = true;\n          saveAccessorValue(this, property);\n          Object.defineProperty(this, property, {\n            /* eslint-disable valid-jsdoc */\n            /** @this {PropertyAccessors} */\n            get: function() {\n              return this.__data[property];\n            },\n            /** @this {PropertyAccessors} */\n            set: readOnly ? function() {} : function(value) {\n              this._setProperty(property, value);\n            }\n            /* eslint-enable */\n          });\n        }\n      }\n\n      /**\n       * Returns true if this library created an accessor for the given property.\n       *\n       * @param {string} property Property name\n       * @return {boolean} True if an accessor was created\n       */\n      _hasAccessor(property) {\n        return this.__dataHasAccessor && this.__dataHasAccessor[property];\n      }\n\n      /**\n       * Updates the local storage for a property (via `_setPendingProperty`)\n       * and enqueues a `_proeprtiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @protected\n       */\n      _setProperty(property, value) {\n        if (this._setPendingProperty(property, value)) {\n          this._invalidateProperties();\n        }\n      }\n\n      /**\n       * Updates the local storage for a property, records the previous value,\n       * and adds it to the set of \"pending changes\" that will be passed to the\n       * `_propertiesChanged` callback.  This method does not enqueue the\n       * `_propertiesChanged` callback.\n       *\n       * @param {string} property Name of the property\n       * @param {*} value Value to set\n       * @return {boolean} Returns true if the property changed\n       * @protected\n       */\n      _setPendingProperty(property, value) {\n        let old = this.__data[property];\n        let changed = this._shouldPropertyChange(property, value, old)\n        if (changed) {\n          if (!this.__dataPending) {\n            this.__dataPending = {};\n            this.__dataOld = {};\n          }\n          // Ensure old is captured from the last turn\n          if (this.__dataOld && !(property in this.__dataOld)) {\n            this.__dataOld[property] = old;\n          }\n          this.__data[property] = value;\n          this.__dataPending[property] = value;\n        }\n        return changed;\n      }\n\n      /**\n       * Returns true if the specified property has a pending change.\n       *\n       * @param {string} prop Property name\n       * @return {boolean} True if property has a pending change\n       * @protected\n       */\n      _isPropertyPending(prop) {\n        return Boolean(this.__dataPending && (prop in this.__dataPending));\n      }\n\n      /**\n       * Marks the properties as invalid, and enqueues an async\n       * `_propertiesChanged` callback.\n       *\n       * @protected\n       */\n      _invalidateProperties() {\n        if (!this.__dataInvalid && this.__dataReady) {\n          this.__dataInvalid = true;\n          microtask.run(() => {\n            if (this.__dataInvalid) {\n              this.__dataInvalid = false;\n              this._flushProperties();\n            }\n          });\n        }\n      }\n\n      /**\n       * Call to enable property accessor processing. Before this method is\n       * called accessor values will be set but side effects are\n       * queued. When called, any pending side effects occur immediately.\n       * For elements, generally `connectedCallback` is a normal spot to do so.\n       * It is safe to call this method multiple times as it only turns on\n       * property accessors once.\n       */\n      _enableProperties() {\n        if (!this.__dataEnabled) {\n          this.__dataEnabled = true;\n          if (this.__dataInstanceProps) {\n            this._initializeInstanceProperties(this.__dataInstanceProps);\n            this.__dataInstanceProps = null;\n          }\n          this.ready()\n        }\n      }\n\n      /**\n       * Calls the `_propertiesChanged` callback with the current set of\n       * pending changes (and old values recorded when pending changes were\n       * set), and resets the pending set of changes. Generally, this method\n       * should not be called in user code.\n       *\n       *\n       * @protected\n       */\n      _flushProperties() {\n        if (this.__dataPending && this.__dataOld) {\n          let changedProps = this.__dataPending;\n          this.__dataPending = null;\n          this.__dataCounter++;\n          this._propertiesChanged(this.__data, changedProps, this.__dataOld);\n          this.__dataCounter--;\n        }\n      }\n\n      /**\n       * Lifecycle callback called the first time properties are being flushed.\n       * Prior to `ready`, all property sets through accessors are queued and\n       * their effects are flushed after this method returns.\n       *\n       * Users may override this function to implement behavior that is\n       * dependent on the element having its properties initialized, e.g.\n       * from defaults (initialized from `constructor`, `_initializeProperties`),\n       * `attributeChangedCallback`, or values propagated from host e.g. via\n       * bindings.  `super.ready()` must be called to ensure the data system\n       * becomes enabled.\n       *\n       * @public\n       */\n      ready() {\n        this.__dataReady = true;\n        // Run normal flush\n        this._flushProperties();\n      }\n\n      /**\n       * Callback called when any properties with accessors created via\n       * `_createPropertyAccessor` have been set.\n       *\n       * @param {!Object} currentProps Bag of all current accessor values\n       * @param {!Object} changedProps Bag of properties changed since the last\n       *   call to `_propertiesChanged`\n       * @param {!Object} oldProps Bag of previous values for each property\n       *   in `changedProps`\n       * @protected\n       */\n      _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars\n      }\n\n      /**\n       * Method called to determine whether a property value should be\n       * considered as a change and cause the `_propertiesChanged` callback\n       * to be enqueued.\n       *\n       * The default implementation returns `true` for primitive types if a\n       * strict equality check fails, and returns `true` for all Object/Arrays.\n       * The method always returns false for `NaN`.\n       *\n       * Override this method to e.g. provide stricter checking for\n       * Objects/Arrays when using immutable patterns.\n       *\n       * @param {string} property Property name\n       * @param {*} value New property value\n       * @param {*} old Previous property value\n       * @return {boolean} Whether the property should be considered a change\n       *   and enqueue a `_proeprtiesChanged` callback\n       * @protected\n       */\n      _shouldPropertyChange(property, value, old) {\n        return (\n          // Strict equality check\n          (old !== value &&\n           // This ensures (old==NaN, value==NaN) always returns false\n           (old === old || value === value))\n        );\n      }\n\n    }\n\n    return PropertyAccessors;\n\n  });\n\n})();\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/mixins/property-accessors.html","<!--\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n-->\n\n<link rel=\"import\" href=\"../utils/boot.html\">\n<link rel=\"import\" href=\"../utils/mixin.html\">\n\n<script>\n(function() {\n\n  'use strict';\n\n  // 1.x backwards-compatible auto-wrapper for template type extensions\n  // This is a clear layering violation and gives favored-nation status to\n  // dom-if and dom-repeat templates.  This is a conceit we're choosing to keep\n  // a.) to ease 1.x backwards-compatibility due to loss of `is`, and\n  // b.) to maintain if/repeat capability in parser-constrained elements\n  //     (e.g. table, select) in lieu of native CE type extensions without\n  //     massive new invention in this space (e.g. directive system)\n  const templateExtensions = {\n    'dom-if': true,\n    'dom-repeat': true\n  };\n  function wrapTemplateExtension(node) {\n    let is = node.getAttribute('is');\n    if (is && templateExtensions[is]) {\n      let t = node;\n      t.removeAttribute('is');\n      node = t.ownerDocument.createElement(is);\n      t.parentNode.replaceChild(node, t);\n      node.appendChild(t);\n      while(t.attributes.length) {\n        node.setAttribute(t.attributes[0].name, t.attributes[0].value);\n        t.removeAttribute(t.attributes[0].name);\n      }\n    }\n    return node;\n  }\n\n  function findTemplateNode(root, nodeInfo) {\n    // recursively ascend tree until we hit root\n    let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);\n    // unwind the stack, returning the indexed node at each level\n    if (parent) {\n      // note: marginally faster than indexing via childNodes\n      // (http://jsperf.com/childnodes-lookup)\n      for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {\n        if (nodeInfo.parentIndex === i++) {\n          return n;\n        }\n      }\n    } else {\n      return root;\n    }\n  }\n\n  // construct `$` map (from id annotations)\n  function applyIdToMap(inst, map, node, nodeInfo) {\n    if (nodeInfo.id) {\n      map[nodeInfo.id] = node;\n    }\n  }\n\n  // install event listeners (from event annotations)\n  function applyEventListener(inst, node, nodeInfo) {\n    if (nodeInfo.events && nodeInfo.events.length) {\n      for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {\n        inst._addMethodEventListenerToNode(node, e.name, e.value, inst);\n      }\n    }\n  }\n\n  // push configuration references at configure time\n  function applyTemplateContent(inst, node, nodeInfo) {\n    if (nodeInfo.templateInfo) {\n      node._templateInfo = nodeInfo.templateInfo;\n    }\n  }\n\n  function createNodeEventHandler(context, eventName, methodName) {\n    // Instances can optionally have a _methodHost which allows redirecting where\n    // to find methods. Currently used by `templatize`.\n    context = context._methodHost || context;\n    let handler = function(e) {\n      if (context[methodName]) {\n        context[methodName](e, e.detail);\n      } else {\n        console.warn('listener method `' + methodName + '` not defined');\n      }\n    };\n    return handler;\n  }\n\n  /**\n   * Element mixin that provides basic template parsing and stamping, including\n   * the following template-related features for stamped templates:\n   *\n   * - Declarative event listeners (`on-eventname=\"listener\"`)\n   * - Map of node id's to stamped node instances (`this.$.id`)\n   * - Nested template content caching/removal and re-installation (performance\n   *   optimization)\n   *\n   * @mixinFunction\n   * @polymer\n   * @memberof Polymer\n   * @summary Element class mixin that provides basic template parsing and stamping\n   */\n  Polymer.TemplateStamp = Polymer.dedupingMixin(superClass => {\n\n    /**\n     * @polymer\n     * @mixinClass\n     * @implements {Polymer_TemplateStamp}\n     */\n    class TemplateStamp extends superClass {\n\n      /**\n       * Scans a template to produce template metadata.\n       *\n       * Template-specific metadata are stored in the object returned, and node-\n       * specific metadata are stored in objects in its flattened `nodeInfoList`\n       * array.  Only nodes in the template that were parsed as nodes of\n       * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object\n       * contains an `index` (`childNodes` index in parent) and optionally\n       * `parent`, which points to node info of its parent (including its index).\n       *\n       * The template metadata object returned from this method has the following\n       * structure (many fields optional):\n       *\n       * ```js\n       *   {\n       *     // Flattened list of node metadata (for nodes that generated metadata)\n       *     nodeInfoList: [\n       *       {\n       *         // `id` attribute for any nodes with id's for generating `$` map\n       *         id: {string},\n       *         // `on-event=\"handler\"` metadata\n       *         events: [\n       *           {\n       *             name: {string},   // event name\n       *             value: {string},  // handler method name\n       *           }, ...\n       *         ],\n       *         // Notes when the template contained a `<slot>` for shady DOM\n       *         // optimization purposes\n       *         hasInsertionPoint: {boolean},\n       *         // For nested `<template>`` nodes, nested template metadata\n       *         templateInfo: {object}, // nested template metadata\n       *         // Metadata to allow efficient retrieval of instanced node\n       *         // corresponding to this metadata\n       *         parentInfo: {number},   // reference to parent nodeInfo>\n       *         parentIndex: {number},  // index in parent's `childNodes` collection\n       *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n       *       },\n       *       ...\n       *     ],\n       *     // When true, the template had the `strip-whitespace` attribute\n       *     // or was nested in a template with that setting\n       *     stripWhitespace: {boolean},\n       *     // For nested templates, nested template content is moved into\n       *     // a document fragment stored here; this is an optimization to\n       *     // avoid the cost of nested template cloning\n       *     content: {DocumentFragment}\n       *   }\n       * ```\n       *\n       * This method kicks off a recursive treewalk as follows:\n       *\n       * ```\n       *    _parseTemplate <---------------------+\n       *      _parseTemplateContent              |\n       *        _parseTemplateNode  <------------|--+\n       *          _parseTemplateNestedTemplate --+  |\n       *          _parseTemplateChildNodes ---------+\n       *          _parseTemplateNodeAttributes\n       *            _parseTemplateNodeAttribute\n       *\n       * ```\n       *\n       * These methods may be overridden to add custom metadata about templates\n       * to either `templateInfo` or `nodeInfo`.\n       *\n       * Note that this method may be destructive to the template, in that\n       * e.g. event annotations may be removed after being noted in the\n       * template metadata.\n       *\n       * @param {!HTMLTemplateElement} template Template to parse\n       * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer\n       *   template, for parsing nested templates\n       * @return {!TemplateInfo} Parsed template metadata\n       */\n      static _parseTemplate(template, outerTemplateInfo) {\n        // since a template may be re-used, memo-ize metadata\n        if (!template._templateInfo) {\n          let templateInfo = template._templateInfo = {};\n          templateInfo.nodeInfoList = [];\n          templateInfo.stripWhiteSpace =\n            (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||\n            template.hasAttribute('strip-whitespace');\n          this._parseTemplateContent(template, templateInfo, {parent: null});\n        }\n        return template._templateInfo;\n      }\n\n      static _parseTemplateContent(template, templateInfo, nodeInfo) {\n        return this._parseTemplateNode(template.content, templateInfo, nodeInfo);\n      }\n\n      /**\n       * Parses template node and adds template and node metadata based on\n       * the current node, and its `childNodes` and `attributes`.\n       *\n       * This method may be overridden to add custom node or template specific\n       * metadata based on this node.\n       *\n       * @param {Node} node Node to parse\n       * @param {!TemplateInfo} templateInfo Template metadata for current template\n       * @param {!NodeInfo} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNode(node, templateInfo, nodeInfo) {\n        let noted;\n        let element = /** @type Element */(node);\n        if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {\n          noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;\n        } else if (element.localName === 'slot') {\n          // For ShadyDom optimization, indicating there is an insertion point\n          templateInfo.hasInsertionPoint = true;\n        }\n        if (element.firstChild) {\n          noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;\n        }\n        if (element.hasAttributes && element.hasAttributes()) {\n          noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;\n        }\n        return noted;\n      }\n\n      /**\n       * Parses template child nodes for the given root node.\n       *\n       * This method also wraps whitelisted legacy template extensions\n       * (`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\n       * wrappers, collapses text nodes, and strips whitespace from the template\n       * if the `templateInfo.stripWhitespace` setting was provided.\n       *\n       * @param {Node} root Root node whose `childNodes` will be parsed\n       * @param {!TemplateInfo} templateInfo Template metadata for current template\n       * @param {!NodeInfo} nodeInfo Node metadata for current template.\n       */\n      static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {\n        for (let node=root.firstChild, parentIndex=0, next; node; node=next) {\n          // Wrap templates\n          if (node.localName == 'template') {\n            node = wrapTemplateExtension(node);\n          }\n          // collapse adjacent textNodes: fixes an IE issue that can cause\n          // text nodes to be inexplicably split =(\n          // note that root.normalize() should work but does not so we do this\n          // manually.\n          next = node.nextSibling;\n          if (node.nodeType === Node.TEXT_NODE) {\n            let /** Node */ n = next;\n            while (n && (n.nodeType === Node.TEXT_NODE)) {\n              node.textContent += n.textContent;\n              next = n.nextSibling;\n              root.removeChild(n);\n              n = next;\n            }\n            // optionally strip whitespace\n            if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {\n              root.removeChild(node);\n              continue;\n            }\n          }\n          let childInfo = { parentIndex, parentInfo: nodeInfo };\n          if (this._parseTemplateNode(node, templateInfo, childInfo)) {\n            childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;\n          }\n          // Increment if not removed\n          if (node.parentNode) {\n            parentIndex++;\n          }\n        }\n      }\n\n      /**\n       * Parses template content for the given nested `<template>`.\n       *\n       * Nested template info is stored as `templateInfo` in the current node's\n       * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.\n       * It will then be the responsibility of the host to set it back to the\n       * template and for users stamping nested templates to use the\n       * `_contentForTemplate` method to retrieve the content for this template\n       * (an optimization to avoid the cost of cloning nested template content).\n       *\n       * @param {HTMLTemplateElement} node Node to parse (a <template>)\n       * @param {TemplateInfo} outerTemplateInfo Template metadata for current template\n       *   that includes the template `node`\n       * @param {!NodeInfo} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {\n        let templateInfo = this._parseTemplate(node, outerTemplateInfo);\n        let content = templateInfo.content =\n          node.content.ownerDocument.createDocumentFragment();\n        content.appendChild(node.content);\n        nodeInfo.templateInfo = templateInfo;\n        return true;\n      }\n\n      /**\n       * Parses template node attributes and adds node metadata to `nodeInfo`\n       * for nodes of interest.\n       *\n       * @param {Element} node Node to parse\n       * @param {TemplateInfo} templateInfo Template metadata for current template\n       * @param {NodeInfo} nodeInfo Node metadata for current template.\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {\n        // Make copy of original attribute list, since the order may change\n        // as attributes are added and removed\n        let noted = false;\n        let attrs = Array.from(node.attributes);\n        for (let i=attrs.length-1, a; (a=attrs[i]); i--) {\n          noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;\n        }\n        return noted;\n      }\n\n      /**\n       * Parses a single template node attribute and adds node metadata to\n       * `nodeInfo` for attributes of interest.\n       *\n       * This implementation adds metadata for `on-event=\"handler\"` attributes\n       * and `id` attributes.\n       *\n       * @param {Element} node Node to parse\n       * @param {!TemplateInfo} templateInfo Template metadata for current template\n       * @param {!NodeInfo} nodeInfo Node metadata for current template.\n       * @param {string} name Attribute name\n       * @param {string} value Attribute value\n       * @return {boolean} `true` if the visited node added node-specific\n       *   metadata to `nodeInfo`\n       */\n      static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {\n        // events (on-*)\n        if (name.slice(0, 3) === 'on-') {\n          node.removeAttribute(name);\n          nodeInfo.events = nodeInfo.events || [];\n          nodeInfo.events.push({\n            name: name.slice(3),\n            value\n          });\n          return true;\n        }\n        // static id\n        else if (name === 'id') {\n          nodeInfo.id = value;\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Returns the `content` document fragment for a given template.\n       *\n       * For nested templates, Polymer performs an optimization to cache nested\n       * template content to avoid the cost of cloning deeply nested templates.\n       * This method retrieves the cached content for a given template.\n       *\n       * @param {HTMLTemplateElement} template Template to retrieve `content` for\n       * @return {DocumentFragment} Content fragment\n       */\n      static _contentForTemplate(template) {\n        let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;\n        return (templateInfo && templateInfo.content) || template.content;\n      }\n\n      /**\n       * Clones the provided template content and returns a document fragment\n       * containing the cloned dom.\n       *\n       * The template is parsed (once and memoized) using this library's\n       * template parsing features, and provides the following value-added\n       * features:\n       * * Adds declarative event listeners for `on-event=\"handler\"` attributes\n       * * Generates an \"id map\" for all nodes with id's under `$` on returned\n       *   document fragment\n       * * Passes template info including `content` back to templates as\n       *   `_templateInfo` (a performance optimization to avoid deep template\n       *   cloning)\n       *\n       * Note that the memoized template parsing process is destructive to the\n       * template: attributes for bindings and declarative event listeners are\n       * removed after being noted in notes, and any nested `<template>.content`\n       * is removed and stored in notes as well.\n       *\n       * @param {!HTMLTemplateElement} template Template to stamp\n       * @return {!StampedTemplate} Cloned template content\n       */\n      _stampTemplate(template) {\n        // Polyfill support: bootstrap the template if it has not already been\n        if (template && !template.content &&\n            window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n          HTMLTemplateElement.decorate(template);\n        }\n        let templateInfo = this.constructor._parseTemplate(template);\n        let nodeInfo = templateInfo.nodeInfoList;\n        let content = templateInfo.content || template.content;\n        let dom = /** @type DocumentFragment */ (document.importNode(content, true));\n        // NOTE: ShadyDom optimization indicating there is an insertion point\n        dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;\n        let nodes = dom.nodeList = new Array(nodeInfo.length);\n        dom.$ = {};\n        for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {\n          let node = nodes[i] = findTemplateNode(dom, info);\n          applyIdToMap(this, dom.$, node, info);\n          applyTemplateContent(this, node, info);\n          applyEventListener(this, node, info);\n        }\n        return /** @type {!StampedTemplate} */(dom);\n      }\n\n      /**\n       * Adds an event listener by method name for the event provided.\n       *\n       * This method generates a handler function that looks up the method\n       * name at handling time.\n       *\n       * @param {Node} node Node to add listener on\n       * @param {string} eventName Name of event\n       * @param {string} methodName Name of method\n       * @param {*=} context Context the method will be called on (defaults\n       *   to `node`)\n       * @return {Function} Generated handler function\n       */\n      _addMethodEventListenerToNode(node, eventName, methodName, context) {\n        context = context || node;\n        let handler = createNodeEventHandler(context, eventName, methodName);\n        this._addEventListenerToNode(node, eventName, handler);\n        return handler;\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to add event listener to\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to add\n       */\n      _addEventListenerToNode(node, eventName, handler) {\n        node.addEventListener(eventName, handler);\n      }\n\n      /**\n       * Override point for adding custom or simulated event handling.\n       *\n       * @param {Node} node Node to remove event listener from\n       * @param {string} eventName Name of event\n       * @param {Function} handler Listener function to remove\n       */\n      _removeEventListenerFromNode(node, eventName, handler) {\n        node.removeEventListener(eventName, handler);\n      }\n\n    }\n\n    return TemplateStamp;\n\n  });\n\n})();\n</script>\n\n\n\n// WEBPACK FOOTER //\n// ../bower_components/polymer/lib/mixins/template-stamp.html","\nimport resolveUrl from '../utils/resolve-url.js'\n\nexport default (superClass) => {\n  return class extends superClass {\n    // static get observedAttributes () {\n    //   const observedAttributes = super.observedAttributes || []\n    //   return observedAttributes.concat(['path', 'query', 'urlSpaceRegex', 'hash', 'dwellTime', 'urlSpaceRegex', '_urlSpaceRegExp', '_lastChangedAt', '_initialized'])\n    // }\n\n    // _propertiesChanged (currentProps, changedProps, oldProps) {\n    //   if (super._propertiesChanged) {\n    //     super._propertiesChanged(currentProps, changedProps, oldProps)\n    //   }\n    //   if ('path' in changedProps && 'query' in changedProps && 'hash' in changedProps) {\n    //     if (changedProps['path'] !== oldProps['path'] && changedProps['query'] !== oldProps['query'] && changedProps['hash'] !== oldProps['hash']) {\n    //       this._updateUrl(changedProps['path'], changedProps['query'], changedProps['hash'])\n    //     }\n    //   }\n    //   if ('urlSpaceRegex' in changedProps) {\n    //     if (changedProps['urlSpaceRegex'] !== oldProps['urlSpaceRegex']) {\n    //       this.__urlSpaceRegExp = this._makeRegExp(changedProps['urlSpaceRegex'])\n    //     }\n    //   }\n    // }\n\n    constructor () {\n      super()\n      this._boundHashChanged = this._hashChanged.bind(this)\n      this._boundUrlChanged = this._urlChanged.bind(this)\n      this._boundGlobalOnClick = this._globalOnClick.bind(this)\n    }\n\n    connectedCallback () {\n      if (super.disconnectedCallback) {\n        super.connectedCallback()\n      }\n      window.addEventListener('hashchange', this._boundHashChanged)\n      window.addEventListener('location-changed', this._boundUrlChanged)\n      window.addEventListener('popstate', this._boundUrlChanged)\n      document.body.addEventListener('click', this._boundGlobalOnClick, true)\n      this._lastChangedAt = window.performance.now() - (this.dwellTime - 200)\n      this._initialized = true\n\n      // set initialize values\n      this.path = window.decodeURIComponent(window.location.pathname)\n      this.query = window.location.search.slice(1)\n      this.hash = window.decodeURIComponent(window.location.hash.slice(1))\n      this.dwellTime = 2000\n      this._initialized = false\n      this._urlChanged()\n    }\n\n    disconnectedCallback () {\n      if (super.disconnectedCallback) {\n        super.disconnectedCallback()\n      }\n      window.removeEventListener('hashchange', this._boundHashChanged)\n      window.removeEventListener('location-changed', this._boundUrlChanged)\n      window.removeEventListener('popstate', this._boundUrlChanged)\n      document.body.removeEventListener('click', this._boundGlobalOnClick)\n      this._initialized = false\n    }\n\n    _hashChanged () {\n      this.hash = window.decodeURIComponent(window.location.hash.substring(1))\n    }\n\n    _urlChanged () {\n      // We want to extract all info out of the updated URL before we\n      // try to write anything back into it.\n      //\n      // i.e. without _dontUpdateUrl we'd overwrite the new path with the old\n      // one when we set this.hash. Likewise for query.\n      this._dontUpdateUrl = true\n      this._hashChanged()\n      this.path = window.decodeURIComponent(window.location.pathname)\n      this.query = window.location.search.substring(1)\n      this._dontUpdateUrl = false\n      this._updateUrl()\n    }\n\n    _getUrl () {\n      var partiallyEncodedPath = window.encodeURI(\n          this.path).replace(/\\#/g, '%23').replace(/\\?/g, '%3F')\n      var partiallyEncodedQuery = ''\n      if (this.query) {\n        partiallyEncodedQuery = '?' + this.query.replace(/\\#/g, '%23')\n      }\n      var partiallyEncodedHash = ''\n      if (this.hash) {\n        partiallyEncodedHash = '#' + window.encodeURI(this.hash)\n      }\n      return (partiallyEncodedPath + partiallyEncodedQuery + partiallyEncodedHash)\n    }\n\n    _updateUrl () {\n      if (this._dontUpdateUrl || !this._initialized) {\n        return\n      }\n\n      if (this.path === window.decodeURIComponent(window.location.pathname) &&\n          this.query === window.location.search.substring(1) &&\n          this.hash === window.decodeURIComponent(\n              window.location.hash.substring(1))) {\n        // Nothing to do, the current URL is a representation of our properties.\n        return\n      }\n      var newUrl = this._getUrl()\n      // Need to use a full URL in case the containing page has a base URI.\n      var fullNewUrl = resolveUrl(newUrl, window.location.protocol + '//' + window.location.host).href\n      var now = window.performance.now()\n      var shouldReplace = this._lastChangedAt + this.dwellTime > now\n      this._lastChangedAt = now\n      if (shouldReplace) {\n        window.history.replaceState({}, '', fullNewUrl)\n      } else {\n        window.history.pushState({}, '', fullNewUrl)\n      }\n      window.dispatchEvent(new CustomEvent('location-changed'))\n    }\n\n    /**\n     * A necessary evil so that links work as expected. Does its best to\n     * bail out early if possible.\n     *\n     * @param {MouseEvent} event .\n     */\n    _globalOnClick (event) {\n      // If another event handler has stopped this event then there's nothing\n      // for us to do. This can happen e.g. when there are multiple\n      // iron-location elements in a page.\n      if (event.defaultPrevented) {\n        return\n      }\n      var href = this._getSameOriginLinkHref(event)\n      if (!href) {\n        return\n      }\n      event.preventDefault()\n      // If the navigation is to the current page we shouldn't add a history\n      // entry or fire a change event.\n      if (href === window.location.href) {\n        return\n      }\n      window.history.pushState({}, '', href)\n      window.dispatchEvent(new CustomEvent('location-changed'))\n    }\n\n    /**\n     * Returns the absolute URL of the link (if any) that this click event\n     * is clicking on, if we can and should override the resulting full\n     * page navigation. Returns null otherwise.\n     *\n     * @param {MouseEvent} event .\n     * @return {string?} .\n     */\n    _getSameOriginLinkHref (event) {\n      // We only care about left-clicks.\n      if (event.button !== 0) {\n        return null\n      }\n      // We don't want modified clicks, where the intent is to open the page\n      // in a new tab.\n      if (event.metaKey || event.ctrlKey) {\n        return null\n      }\n      var eventPath = event.composedPath()\n      var anchor = null\n      for (var i = 0; i < eventPath.length; i++) {\n        var element = eventPath[i]\n        if (element.tagName === 'A' && element.href) {\n          anchor = element\n          break\n        }\n      }\n      // If there's no link there's nothing to do.\n      if (!anchor) {\n        return null\n      }\n      // Target blank is a new tab, don't intercept.\n      if (anchor.target === '_blank') {\n        // capture link click\n        if (anchor.href && window.ga) {\n          ga('send', 'event', 'Link', 'Click', anchor.href, 1)\n        }\n        return null\n      }\n      // If the link is for an existing parent frame, don't intercept.\n      if ((anchor.target === '_top' ||\n          anchor.target === '_parent') &&\n          window.top !== window) {\n        return null\n      }\n      var href = anchor.href\n      // It only makes sense for us to intercept same-origin navigations.\n      // pushState/replaceState don't work with cross-origin links.\n      var url\n      if (document.baseURI != null) {\n        url = resolveUrl(href, /** @type {string} */(document.baseURI))\n      } else {\n        url = resolveUrl(href)\n      }\n      var origin\n      // IE Polyfill\n      if (window.location.origin) {\n        origin = window.location.origin\n      } else {\n        origin = window.location.protocol + '//' + window.location.host\n      }\n      var urlOrigin\n      if (url.origin) {\n        urlOrigin = url.origin\n      } else {\n        urlOrigin = url.protocol + '//' + url.host\n      }\n      if (urlOrigin !== origin) {\n        return null\n      }\n      var normalizedHref = url.pathname + url.search + url.hash\n      // pathname should start with '/', but may not if `new URL` is not supported\n      if (normalizedHref[0] !== '/') {\n        normalizedHref = '/' + normalizedHref\n      }\n      // If we've been configured not to handle this url... don't handle it!\n      if (this._urlSpaceRegExp &&\n          !this._urlSpaceRegExp.test(normalizedHref)) {\n        return null\n      }\n      // Need to use a full URL in case the containing page has a base URI.\n      var fullNormalizedHref = resolveUrl(\n          normalizedHref, window.location.href).href\n      return fullNormalizedHref\n    }\n\n    _makeRegExp (urlSpaceRegex) {\n      return RegExp(urlSpaceRegex)\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../core/mixins/location-mixin.js","var workingURL\nvar urlDoc, urlBase, anchor\n/**\n * @param {string} path\n * @param {string=} base\n * @return {!URL|!HTMLAnchorElement}\n */\nexport default (path, base) => {\n  if (workingURL === undefined) {\n    workingURL = false\n    try {\n      var u = new URL('b', 'http://a')\n      u.pathname = 'c%20d'\n      workingURL = (u.href === 'http://a/c%20d')\n      workingURL = workingURL && (new URL('http://www.google.com/?foo bar').href === 'http://www.google.com/?foo%20bar')\n    } catch (e) {}\n  }\n  if (workingURL) {\n    return new URL(path, base)\n  }\n  if (!urlDoc) {\n    urlDoc = document.implementation.createHTMLDocument('url')\n    urlBase = urlDoc.createElement('base')\n    urlDoc.head.appendChild(urlBase)\n    anchor = /** @type {HTMLAnchorElement} */(urlDoc.createElement('a'))\n  }\n  urlBase.href = base\n  anchor.href = path.replace(/ /g, '%20')\n  return anchor\n}\n\n\n\n// WEBPACK FOOTER //\n// ../core/utils/resolve-url.js","// import 'polymer/lib/mixins/property-effects.html'\nexport default (superClass) => {\n  return class extends superClass {\n    connectedCallback () {\n      if (super.connectedCallback) {\n        super.connectedCallback()\n      }\n\n      // initialize values\n      this.paramsObject = {}\n      this._dontReact = false\n    }\n\n    // static get observedAttributes () {\n    //   const observedAttributes = super.observedAttributes || []\n    //   return observedAttributes.concat(['paramsString', 'paramsObject', '_dontReact'])\n    // }\n\n    // _propertiesChanged (currentProps, changedProps, oldProps) {\n    //   if (super._propertiesChanged) {\n    //     super._propertiesChanged(currentProps, changedProps, oldProps)\n    //   }\n    //   if ('paramsString' in changedProps) {\n    //     if (changedProps['paramsString'] !== oldProps['paramsString']) {\n    //       this._paramsStringChanged()\n    //     }\n    //   }\n    //   if ('query' in changedProps) {\n    //     if (changedProps['query'] !== oldProps['query']) {\n    //       this._queryChanged(changedProps['query'])\n    //     }\n    //   }\n    // }\n\n    _queryChanged (query) {\n      this.paramsString = query\n    }\n\n    _paramsStringChanged () {\n      this._dontReact = true\n      this.paramsObject = this._decodeParams(this.paramsString)\n      this._dontReact = false\n    }\n\n    paramsObjectChanged () {\n      console.log('paramsObject')\n      if (this._dontReact) {\n        return\n      }\n      this.paramsString = this._encodeParams(this.paramsObject)\n          .replace(/%3F/g, '?').replace(/%2F/g, '/').replace(/'/g, '%27')\n    }\n\n    _encodeParams (params) {\n      var encodedParams = []\n      for (var key in params) {\n        var value = params[key]\n        if (value === '') {\n          encodedParams.push(encodeURIComponent(key))\n        } else if (value) {\n          encodedParams.push(\n              encodeURIComponent(key) +\n              '=' +\n              encodeURIComponent(value.toString())\n          )\n        }\n      }\n      return encodedParams.join('&')\n    }\n\n    _decodeParams (paramString) {\n      var params = {}\n      // Work around a bug in decodeURIComponent where + is not\n      // converted to spaces:\n      paramString = (paramString || '').replace(/\\+/g, '%20')\n      var paramList = paramString.split('&')\n      for (var i = 0; i < paramList.length; i++) {\n        var param = paramList[i].split('=')\n        if (param[0]) {\n          params[decodeURIComponent(param[0])] =\n              decodeURIComponent(param[1] || '')\n        }\n      }\n      return params\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../core/mixins/query-params-mixin.js","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/path-to-regexp/index.js","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n\n// WEBPACK FOOTER //\n// ../node_modules/isarray/index.js","\n    export default {\n      '/': () => { return import(/* webpackChunkName: \"uxia-home-page\" */ './modules/uxia-module/pages/uxia-home-page/uxia-home-page.html') }, \n'style-guide': () => { return import(/* webpackChunkName: \"example-style-guide-page\" */ './modules/example-module/pages/example-style-guide-page/example-style-guide-page.js') }\n    }\n  \n\n\n// WEBPACK FOOTER //\n// ../src/routing.js","\n    export default {\n      'not-found': () => { return import(/* webpackChunkName: \"example-not-found-page\" */ './modules/example-module/pages/example-not-found-page/example-not-found-page.js') }, \n'not-authorized': () => { return import(/* webpackChunkName: \"example-not-authorized-page\" */ './modules/example-module/pages/example-not-authorized-page/example-not-authorized-page.js') }\n    }\n  \n\n\n// WEBPACK FOOTER //\n// ../src/http-codes.js","\n    export default {\n      \n    }\n  \n\n\n// WEBPACK FOOTER //\n// ../src/partials.js","export default {\n  exampleAuthentication: () => {\n    // returns a 'falsy' value, which means the user is not authenticated\n    return false\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ../src/authentication/index.js","/* eslint-env browser */\n\nclass RegisterHtmlTemplate {\n  /**\n   * Create a `<template>` element to hold `<dom-module>` content.\n   * This bit of code will execute in the context of the main document,\n   * calling `importNode` on the `<template>`, which in turn triggers\n   * the lifecycle of the `<dom-module>` and allows it to insert its\n   * content into Polymer's global module map. When a Polymer element\n   * boots up it will fetch its template from this module map.\n   * https://github.com/Polymer/polymer/blob/master/lib/mixins/element-mixin.html#L501-L538\n   * @param {string} val A `<dom-module>` as an HTML string\n   */\n  static register(val) {\n    let content;\n    const template = document.createElement('template');\n    template.innerHTML = val;\n    if (template.content) {\n      content = template.content; // eslint-disable-line prefer-destructuring\n    } else {\n      content = document.createDocumentFragment();\n      while (template.firstChild) {\n        content.appendChild(template.firstChild);\n      }\n    }\n    document.importNode(content, true);\n  }\n  /**\n   * Content that will be injected into the main document. This is primarily\n   * for things like `<iron-iconset>` and `<custom-style>` which do not have\n   * templates but rely on HTML Imports ability to apply content to the main\n   * document.\n   * @param {string} val An HTML string\n   */\n  static toBody(val) {\n    const trimmedVal = val.trim();\n    if (trimmedVal) {\n      const div = document.createElement('div');\n      div.innerHTML = trimmedVal;\n      if (div.firstChild) {\n        if (document.body) {\n          document.body.insertBefore(div.firstChild, document.body.firstChild);\n        } else {\n          document.addEventListener('DOMContentLoaded', () => {\n            document.body.insertBefore(div.firstChild, document.body.firstChild);\n          });\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = RegisterHtmlTemplate;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/polymer-webpack-loader/register-html-template.js"],"sourceRoot":""}